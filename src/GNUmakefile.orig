# SparForte - Business Shell Makefile
#
# This makefile is for GNU make

# These are filled in by ./configure.  If they are incorrect, change them for
# your system...
#
# For SDL, sdl_config is not always available.

CC=CCTYPE
CPU=CPUTYPE
CPU_FLAG=CPUFLAG
MAKE=GMAKETYPE
PREFIX=PREFIXSUB
MANPREFIX=MANPREFIXSUB
GNATMAKE=gnatmake
SDLLIBS=SDLLIBSTYPE
SDLINCL=SDLINCLTYPE
CFLAGS=CFLAGSTYPE
PGLIBS=PGLIBSSUB
MYSQLLIBS=MYSQLLIBSSUB
APQLIBS=APQLIBSSUB
APQINCL=APQINCLSSUB
APQMAKE=APQMAKESUB
#ADAVOXINCL=ADAVOXINCLSSUB
#ADAVOXLIBS=ADAVOXLIBSSUB
#ADAVOXMAKE=ADAVOXMAKESUB
GSTREAMERLIBS=GSTREAMERLIBSSUB
GSTREAMERFLAG=GSTREAMERFLAGSUB
GSTREAMEROBJ=GSTREAMEROBJSUB
# -D copies files to a new directory but doesn't delete them
# from where they were originally created.
# Make Max not updated
#GNATMAKEOBJDIR=-D/dev/shm/sparforte/ -I/dev/shm/sparforte/
#GNATBINDOBJDIR=-I/dev/shm/sparforte/
MESAINCL=MESAINCLSUB
MESALIBS=MESALIBSSUB
BDBINCL=BDBINCLSUB
BDBLIBS=BDBSUB
RLINCL=RLINCLSUB
RLLIBS=RLLIBSSUB
#PCREINCL=PCREINCLSUB
PCRELIBS=PCRELIBSSUB
PCREOBJ=PCREOBJSUB

# Libraries and Paths

#INCLUDE=-I./adacgi-1.6/ -I./apq-2.1/ -I./ADAVOX-0.51/bc -I./ADAVOX-0.51/wc -I./ADAVOX-0.51/main -I/usr/include/SDL
# Compiling options for including files
INCLUDE=-I./adacgi-1.6/ ${APQINCL} -I./pegasock/ ${MESAINCL} ${SDLINCL} ${BDBINCL} ${RLINCL} ${PCRELIBS}
# When binding, don't need to include the SDL files.  In particular, the -D
# option created by the SDL config program will break gnatbind.
INCLUDE_BIND=-I./adacgi-1.6/ ${APQINCL} -I./pegasock/ ${BDBINCL} ${RLINCL} #${MESAINCL}
#LIBS=-L`pg_config --libdir` -L./apq-1.92/ -lpq -lSDL ${PTHREAD_LIBS}
#LIBS=-L`pg_config --libdir` -L./apq-2.1/ ./apq-2.1/c_mysql.o -l SDL -l SDL_image ${PTHREAD_LIBS}
LIBS=${PGLIBS} ${MYSQLLIBS} ${APQLIBS} -L./pegasock/ ./pegasock/c_tinyserve.o ./pegasock/c_errno.o ${SDLLIBS} ${MESALIBS} ${BDBLIBS} ${RLLIBS} ${PCRELIBS}
# c_mysql.o missing in APQ 2.1 library

# Make Rules Start

all: c_os.o c_scanner.o c_gstreamer.o c_pcre.o
	@echo
	@echo "==============================================================="
	@echo "  SparForte - Business Shell"
	@echo "    Need help? Type make help"
	@echo "==============================================================="
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making AdaCGI"
	@echo "    http://www.dwheeler.com/adacgi"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C adacgi-1.6
	#@echo
	#@echo "---------------------------------------------------------------"
	#@echo "  Making AdaVOX (Wav/AU Player)"
	#@echo "    http://home.cogeco.ca/~ve3wwg"
	#@echo "---------------------------------------------------------------"
	#@echo
	#$(ADAVOXMAKE)
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making PegaSoft Socket Library"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C pegasock/
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making APQ (PostgreSQL/MySQL DBI)"
	@echo "    http://home.cogeco.ca/~ve3wwg"
	@echo "---------------------------------------------------------------"
	@echo
	$(APQMAKE)
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making Berkeley DB Support"
	@echo "---------------------------------------------------------------"
	@echo
ifneq ($(strip $(BDBLIBS)),)
	$(MAKE) -C bdb
else
	@echo "Disabled"
endif
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making GNU Readline Support"
	@echo "---------------------------------------------------------------"
	@echo
ifneq ($(strip $(RLLIBS)),)
	$(MAKE) -C areadline
else
	@echo "Disabled"
endif
	@echo
	@echo "---------------------------------------------------------------"
	@echo " Making SparForte"
	@echo "   http://www.sparforte.com"
	@echo "---------------------------------------------------------------"
	@echo
	# $(GNATMAKE) -j2 -c -i -O1 $(CPU_FLAG)=$(CPU) -we -gnat12 -gnatfaoN -gnatVaep -gnatw.eDHM.Y -gnateEeEeF -gnatybdh -fstack-protector -c $(INCLUDE) spar
	$(GNATMAKE) -j2 -c -i -O1 $(CPU_FLAG)=$(CPU) -we -gnat12 -gnatfaoN -gnatVaep -gnateEeEeF -fstack-protector -c $(INCLUDE) spar
	gnatbind -x $(INCLUDE_BIND) spar.ali
	gnatlink spar.ali $(GSTREAMERLIBS) $(GSTREAMEROBJ) $(PCREOBJ) c_os.o c_scanner.o $(LIBS)
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Thanks for choosing SparForte"
	@echo "---------------------------------------------------------------"
	@echo

c_os.o:	c_os.c
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Compiling C Wrappers on Kernel and OS Library Functions"
	@echo "  To Make SparForte Portable"
	@echo "---------------------------------------------------------------"
	@echo
	$(CC) $(CFLAGS) $(INCLUDE) -Wall -Werror -fstack-protector -O1 -D_FORTIFY_SOURCE=2 -c c_os.c

c_scanner.o: c_scanner.c
	$(CC) $(CFLAGS) $(INCLUDE) $(SDLINCL) -Wall -Werror -fstack-protector -O1 -D_FORTIFY_SOURCE=2 -c c_scanner.c

# GStreamer binding is optional

c_gstreamer.o: c_gstreamer.c
ifneq ($(strip $(GSTREAMERFLAG)),)
	$(CC) $(CFLAGS) $(GSTREAMERFLAG) $(GSTREAMERLIBS) -Wall -Werror -fstack-protector -O1 -D_FORTIFY_SOURCE=2 -c c_gstreamer.c
else
	@echo "GStreamer disabled"
endif

# PCRE binding is optional

c_pcre.o: c_pcre.c
ifneq ($(strip $(PCRELIBS)),)
	$(CC) $(CFLAGS) $(PCRELIBS) -Wall -Werror -fstack-protector -O1 -D_FORTIFY_SOURCE=2 -c c_pcre.c
else
	@echo "PCRE disabled"
endif

#apq-2.1/Makeincl:
#	@echo "---------------------------------------------------------------"
#	@echo "  Configuring APQ Library"
#	@echo "---------------------------------------------------------------"
#	./apq-2.1/configure
#	mv -f Makeincl apq-2.1/Makeincl

max: c_os.o c_scanner.o c_gstreamer.o c_pcre.o
	@echo
	@echo "---------------------------------------------------------------"
	@echo "Making AdaCGI"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C adacgi-1.6
	#@echo
	#@echo "---------------------------------------------------------------"
	#@echo "Making AdaVOX"
	#@echo "---------------------------------------------------------------"
	#@echo
	#$(ADAVOXMAKE)
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making PegaSoft Socket Library"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C pegasock/
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making APQ (PostgreSQL/MySQL DBI)"
	@echo "    http://home.cogeco.ca/~ve3wwg"
	@echo "---------------------------------------------------------------"
	@echo
	$(APQMAKE)
	@echo
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making Berkeley DV Support"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C bdb
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making GNU Readline Support"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C areadline
	@echo
	@echo "---------------------------------------------------------------"
	@echo "Making SparForte"
	@echo "---------------------------------------------------------------"
	@echo
	$(GNATMAKE) -j2 -c -i -O3 $(CPU_FLAG)=$(CPU) -gnatf -gnatn -gnatp -ffast-math -c $(INCLUDE) spar
	gnatbind -x $(INCLUDE_BIND) spar.ali
	gnatlink spar.ali $(GSTREAMERLIBS) $(GSTREAMEROBJ) $(PCREOBJ) c_os.o c_scanner.o $(LIBS)

clean:
	-$(MAKE) -C areadline clean
	$(MAKE) -C adacgi-1.6 clean
	$(MAKE) -C apq-2.1 clean
	$(MAKE) -C bdb clean
	#$(MAKE) -C ADAVOX-0.51 clean
	$(MAKE) -C pegasock clean
	-rm -f *.o *.ali t.t t.spar core spar.zip spar testsuite/write_only.txt testsuite/exec_only.txt
	-rm -f *.gcda *.gcno *.gcov coverage.info gmon.out testsuite/templates/gmon.out testsuite/goodsuite/gmon.out testsuite/helpsuite/gmon.out testsuite/third_party/gmon.out testsuite/gmon.out testsuite/testsuite010_pragmas/gmon.out testsuite/testsuite015_arrays/gmon.out testsuite/testsuite012_calendar/gmon.out

distclean:
	-$(MAKE) -C areadline clean
	$(MAKE) -C adacgi-1.6 clean
	#$(MAKE) -C ADAVOX-0.51 clobber
	$(MAKE) -C apq-2.1 clobber
	$(MAKE) -C pegasock clean
	-rm -f *.o *.ali *~ t.t t.spar core spar.zip spar testsuite/write_only.txt testsuite/exec_only.txt
	-rm -f *.gcda *.gcno *.gcov coverage.info
	-rm -rf coverage/ testsuite/junit_result.xml
	-rm -f spar_os.ads spar_os.adb spar_os-sdl.ads parser_db.adb parser_dbm.adb parser_mysql.adb parser_mysqlm.adb parser_sound.adb world.ads builtins.adb parser_gnat_cgi.adb scanner_res.adb scanner_res.ads parser_btree_io.adb parser_hash_io.adb parser_strings_pcre.adb


test: all
	@echo "---------------------------------------------------------------"
	@echo "  RUNNING REGRESSION TEST SUITE"
	@echo "---------------------------------------------------------------"
	(cd testsuite; sh runtests.sh -f)

coverage: c_os.o c_scanner.o c_gstreamer.o c_pcre.o
	@echo
	@echo "Coverage will require:"
	@echo
	@echo " - 2nd memcache (memcached -l 127.0.0.1 -p 11212 &)"
	@echo " - Xvfb for SDL testing"
	@echo " - gcov, gcovr and lcov installed"
	@echo
	@echo "Continuing in 3 secs..."
	@sleep 3
	@echo "==============================================================="
	@echo "  SparForte - Business Shell"
	@echo "    Need help? Type make help"
	@echo "==============================================================="
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making AdaCGI"
	@echo "    http://www.dwheeler.com/adacgi"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C adacgi-1.6
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making PegaSoft Socket Library"
	@echo "---------------------------------------------------------------"
	@echo
	$(MAKE) -C pegasock/
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making APQ (PostgreSQL/MySQL DBI)"
	@echo "    http://home.cogeco.ca/~ve3wwg"
	@echo "---------------------------------------------------------------"
	@echo
	$(APQMAKE)
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making Berkeley DB Support"
	@echo "---------------------------------------------------------------"
	@echo
ifneq ($(strip $(BDBLIBS)),)
	$(MAKE) -C bdb
else
	@echo "Disabled"
endif
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Making GNU Readline Support"
	@echo "---------------------------------------------------------------"
	@echo
ifneq ($(strip $(RLLIBS)),)
	$(MAKE) -C areadline
else
	@echo "Disabled"
endif
	@echo
	@echo "---------------------------------------------------------------"
	@echo " Making SparForte (with code coverage)"
	@echo "   http://www.sparforte.com"
	@echo "---------------------------------------------------------------"
	@echo
	# Remove old test results (keep .gcno - notes files)
	-rm -f *.gcda *.gcov coverage.info
	# Always build without optimization to ensure correct coverage results
	# -pg required for gprof performance profiling
	$(GNATMAKE) -j2 -c -i -O0 $(CPU_FLAG)=$(CPU) -we -gnat12 -gnatfaoN -gnatVaep -gnateEeEeF -gnatybdh -fstack-protector -fprofile-arcs -ftest-coverage -pg -g -c $(INCLUDE) spar
	gnatbind -x $(INCLUDE_BIND) spar.ali
	gnatlink spar.ali $(GSTREAMERLIBS) $(GSTREAMEROBJ) $(PCREOBJ) c_os.o c_scanner.o $(LIBS) -lgcov -pg
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  RUNNING REGRESSION TEST SUITE"
	@echo "---------------------------------------------------------------"
	(cd testsuite; sh runtests.sh -g)
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  RUNNING THIRD PARTY TEST SUITE"
	@echo "---------------------------------------------------------------"
	(cd testsuite; sh third_party_tests.sh)
	@echo
	@echo "---------------------------------------------------------------"
	@echo "  Generating Code Coverage Reports (gcov, lcov and cloc)"
	@echo
	@echo "  This covers language regression tests only"
	@echo "---------------------------------------------------------------"
	@echo
	#compute lines of code
	#sloccount --duplicates --wide --details . > sloccount.txt
	cloc --by-file --xml --quiet --progress-rate=0 --report-file="cloc.xml" .
	#gcov produces text files, lcov produces html like PHP coverage
	gcov -b *.adb
	# b~ confuses lcov
	-rm b~*
	gcovr '--branches' '--xml-pretty' -r . -o gcovr.xml
	#gcovr --branches -r . --html --html-details -o gcovr-report.html
	lcov '--capture' '--directory' . '--output-file' coverage.info
	# Ignore Ada files
	lcov '--remove' coverage.info '/usr/*' '--output-file' coverage.info
	# Ignore third-party software
	lcov '--remove' coverage.info 'src/apq-2.1/*' '--output-file' coverage.info
	lcov '--remove' coverage.info 'gen_list.ad*' '--output-file' coverage.info
	lcov '--remove' coverage.info 'scanner-calendar.ad*' '--output-file' coverage.info
    # Ignore incomplete software
	lcov '--remove' coverage.info 'parser_tinyserve.ad*' '--output-file' coverage.info
	lcov '--remove' coverage.info 'parser_vectors.ad*' '--output-file' coverage.info
    # Ignore graphics and sound from automated tests
	lcov '--remove' coverage.info 'spar_os-sound.ad*' '--output-file' coverage.info
	lcov '--remove' coverage.info 'parser_sound.ad*' '--output-file' coverage.info
	lcov '--remove' coverage.info 'parser_pen.ad*' '--output-file' coverage.info
	genhtml coverage.info '--output-directory' coverage
	@echo
	@echo "---------------------------------------------------------------"
	@echo "Code coverage report located at src/coverage/index.html"
	@echo "Remember code coverage is still enabled for this build"
	@echo "---------------------------------------------------------------"

releasetest: test
	@echo "---------------------------------------------------------------"
	@echo "  RUNNING THIRD PARTY TEST SUITE"
	@echo "---------------------------------------------------------------"
	(cd testsuite; sh third_party_tests.sh)
	@echo "---------------------------------------------------------------"
	@echo "  RUNNING FUZZ TEST SUITE"
	@echo "---------------------------------------------------------------"
	(cd testsuite; sh fuzzsuite/fuzz.sh)
	@echo "---------------------------------------------------------------"
	@echo "  RUNNING EXAMPLE SCRIPT TEST SUITE"
	@echo "---------------------------------------------------------------"
	(cd testsuite; sh example_tests.sh)
	@echo "---------------------------------------------------------------"
	@echo "  RUNNING BUILD SYSTEM TEST SUITE"
	@echo "---------------------------------------------------------------"
	(cd testsuite; sh build_tests.sh)

zip: distclean
	(cd ..; zip -9r *; cd src)

srczip: distclean
	chmod 440 os_bindings/spar_alpha.ads
	chmod 440 os_bindings/spar_freebsd.ads
	chmod 440 os_bindings/spar_linux.ads
	chmod 440 os_bindings/spar_hp.ads
	chmod 440 os_bindings/spar_hp.adb
	chmod 440 spar_os-sdl-32bit.ads
	chmod 440 spar_os-sdl-64bit.ads
	(cd ..; zip -9r *; cd src)

srctar: distclean
	chmod 440 os_bindings/spar_alpha.ads
	chmod 440 os_bindings/spar_freebsd.ads
	chmod 440 os_bindings/spar_linux.ads
	chmod 440 os_bindings/spar_hp.ads
	chmod 440 os_bindings/spar_hp.adb
	chmod 440 spar_os-sdl-32bit.ads
	chmod 440 spar_os-sdl-64bit.ads
	(cd ..;  tar cfvz spar.tgz *; cd src)
	@echo "Don't forget to unpack and repack under a descriptive directory"

rpm:	all

bintar: c_os.o all
	gnatbind -x $(INCLUDE_BIND) spar.ali
	gnatlink spar.ali $(GSTREAMERLIBS) $(GSTREAMEROBJ) $(PCREOBJ) c_os.o c_scanner.o $(LIBS) ; ( cd ..; rm -f spar.tgz; tar cfvz spar.tgz src/spar src/spar.1 README COPYING INSTALL ChangeLog provision.sh examples doc GNUmakefile sparforte_f_icon.xpm  sparforte_sail_icon.xpm; rm -f spar )
	@echo "Don't forget to unpack and repack under a descriptive directory"

install:
ifdef RPM_BUILD_ROOT
	install -d ${DESTDIR}${PREFIX}/bin
	install -m 555 spar ${DESTDIR}${PREFIX}/bin/spar
	install -d ${DESTDIR}$(MANPREFIX)/man1
	install -m 555 spar.1 ${DESTDIR}${MANPREFIX}/man1/spar.1
else
	install -d ${PREFIX}/bin
	install -m 555 spar ${PREFIX}/bin/spar
	install -d $(MANPREFIX)/man/man1
	install -m 555 spar.1 ${MANPREFIX}/man/man1/spar.1
endif

uninstall:
ifdef RPM_BUILD_ROOT
	rm ${DESTDIR}/${PREFIX}/bin/spar
	rm ${DESTDIR}/${MANPREFIX}/man1/spar.1
else
	rm ${PREFIX}/bin/spar
	rm ${MANPREFIX}/man1/spar.1
endif

help:
	@echo "Run configure first, if you have not already done so."
	@echo "Then you can make these:"
	@echo "  all       - (default) normal build"
	@echo "  max       - optimize performance, minimum error checks"
	@echo "  install   - install sparforte binary file in /usr/local/bin"
	@echo "  uninstall - remove sparforte binary file in /usr/local/bin"
	@echo "  clean     - remove temporary and binary files"
	@echo "  distclean - clean and remove operating system choice"
	@echo "  test      - make all, then run regression tests"
	@echo "  coverage  - make all, regressions, third-party tests and code coverage"
	@echo "  releasetest - make all, regressions, third-party and built tests"
	@echo "  zip       - create a .zip source archive with important files"
	@echo "  srczip    - create a .zip source archive to share with others"
	@echo "  srctar    - create a .tgz source archive to share with others"
	@echo "  bintar    - create a tgz of binary files to share with others"
	@echo "  rpm       - build an rpm (must have spec file)"

.PHONY: all max install uninstall clean distclean test coverage releasetest zip srczip srctar bintar rpm help

