------------------------------------------------------------------------------
-- Built-in Shell Commands                                                  --
--                                                                          --
-- Part of SparForte                                                        --
------------------------------------------------------------------------------
--                                                                          --
--            Copyright (C) 2001-2021 Free Software Foundation              --
--                                                                          --
-- This is free software;  you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 2,  or (at your option) any later ver- --
-- sion.  This is distributed in the hope that it will be useful, but WITH- --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License  distributed with this;  see file COPYING.  If not, write --
-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
-- MA 02111-1307, USA.                                                      --
--                                                                          --
-- This is maintained at http://www.pegasoft.ca                             --
--                                                                          --
------------------------------------------------------------------------------

with ada.text_io,
     ada.strings.unbounded.text_io,
     ada.strings.fixed,
     gnat.source_info,
#if POSTGRES
     APQ,
#else
#if MYSQL
     APQ,
#end if;
#end if;
     spar_os,
     string_util,
     user_io,
     world,
     scanner,
     jobs,
     parser_db,
     parser_mysql;
use  ada.text_io,
     ada.strings.unbounded.text_io,
     ada.strings.fixed,
#if POSTGRES
     APQ,
#else
#if MYSQL
     APQ,
#end if;
#end if;
     string_util,
     jobs,
     user_io,
     world,
     scanner,
     parser_db,
     parser_mysql;

package body builtins is

-----------------------------------------------------------------------------
--  FIND PWD
--
-- Assign the current working directory to the current_working_directory
-- variable.
-- Determine current working directory and assign it to the current_working_
-- directory variable, else assign it a null string.
-- loosely modelled on bash/builtins/cd.def
-----------------------------------------------------------------------------

buffer : string( 1..4096 );

procedure findPwd is
begin
  C_reset_errno;
  getcwd( buffer, buffer'length );
  if C_errno /= 0 then
     err( "findPwd: error getting current working directory, errno "
       & C_errno'img );
     current_working_directory := null_unbounded_string;
  end if;
  current_working_directory := to_unbounded_string(
     buffer( 1..index( buffer, ASCII.NUL & "" ) - 1 ) ) ;
end findPwd;


-----------------------------------------------------------------------------
--  BIND PWD
--
-- Assign the current working directory to the current_working_directory
-- variable.
-- loosely modelled on bash/builtins/cd.def
-----------------------------------------------------------------------------

procedure bindPwd( symlinks : boolean := false ) is
begin
  findPwd;
  if current_working_directory /= null_unbounded_string then
     -- SYMBOLIC LINKS TO BE HANDLED HERE LATER
     --findIdent( to_unbounded_string( "PWD" ), pwd );
     --findIdent( to_unbounded_string( "OLDPWD" ), oldpwd );
     --if identifiers( pwd ).kind = string_t then
     --   if identifiers( oldpwd ).kind = string_t then
     --      identifiers( oldpwd ).value := identifiers( pwd ).value;
     --   end if;
     --   identifiers( pwd ).value := current_working_directory;
     --end if;
     null;
  end if;
end bindPwd;


-----------------------------------------------------------------------------
--  OLD_PWD
--
-- Old version of the builtin pwd command used in previous versions of Bush.
-- Syntax: old_pwd
-- loosely modelled on bash/builtins/cd.def
-----------------------------------------------------------------------------

function old_pwd return unbounded_string is
-- pwd: present working directory
begin
   bindPwd;
   return current_working_directory;
end old_pwd;


-----------------------------------------------------------------------------
--  OLD_CD
--
-- Old version of the builtin cd command used in previous versions of Bush.
-- Syntax: old_cd s
-- loosely modelled on bash/builtins/cd.def
-----------------------------------------------------------------------------

procedure old_cd( s : unbounded_string ) is
  pwd, oldpwd : identifier;
  path : unbounded_string := s;
  showPath : boolean := false;
  temp_id : identifier;
begin
  if length( path ) = 0 then                 -- no path?
     path := to_unbounded_string( "$HOME" ); -- then go home
  -- Normally, tilde is substituted in a shell word expansion.
  -- However, we may end up here if AdaScript parameters are used.
  elsif Element( path, 1 ) = '~' then        -- leading tilda?
     Delete( path, 1, 1 );                   -- shortform for
     Insert( path, 1, "$HOME" );             -- home
  elsif path = "-" then                      -- minus path?
     path := to_unbounded_string( "$OLDPWD" ); -- short for OLDPWD
     showPath := inputMode = interactive or inputMode = breakout;
  end if;
  if head( path, 5 ) = "$HOME" then
     findIdent( to_unbounded_string( "HOME" ), temp_id );
     Delete( path, 1, 5 );
     Insert( path, 1, to_string( identifiers( temp_id ).value.all ) );
  elsif head( path, 7 ) = "$OLDPWD" then
     findIdent( to_unbounded_string( "OLDPWD" ), temp_id );
     Delete( path, 1, 7 );
     Insert( path, 1, to_string( identifiers( temp_id ).value.all ) );
  end if;

  -- CDPATH support not yet implmeneted.  Should go HERE, but
  -- is CDPATH such a good idea anyway?  Not usually!

  if chdir( to_string( path ) & ASCII.NUL ) = 0 then
     bindPwd;
-- it should also not take into account the nesting (should be global)
     findIdent( to_unbounded_string( "PWD" ), pwd );
     findIdent( to_unbounded_string( "OLDPWD" ), oldpwd );
     if pwd /= eof_t then
        if oldpwd /= eof_t then
           identifiers( oldpwd ).value.all := identifiers( pwd ).value.all;
        end if;
        identifiers( pwd ).value.all := current_working_directory;
     end if;
  else
     err( "cannot access " & toProtectedValue( path ) );
  end if;
  if showPath then
     put_line( current_working_directory );
  end if;
end old_cd;


-----------------------------------------------------------------------------
--  ALTER (SQL COMMAND)
--
-- alter : SQL alter - change database configuration
-- Syntax: alter shell_word
-----------------------------------------------------------------------------

procedure alter( ap : argumentListPtr ) is
-- alter : SQL alter
  tempStr : unbounded_string;
begin
  if ap'length /= 1 then
     err( "one argument expected" );
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     if not engineOpen then
        err( "no database connection open" );
     elsif currentEngine = Engine_PostgreSQL then
#if POSTGRES
        DoSQLStatement( "alter " & tempStr );
#else
        err( "postgresql support not configured" );
#end if;
     elsif currentEngine = Engine_MySQL then
#if MYSQL
        DoMySQLSQLStatement( "alter " & tempStr );
#else
        err( "mysql support not configured" );
#end if;
     else
        err( gnat.source_info.source_location & ": internal error: unrecognized database engine" );
     end if;
  end if;
end alter;


-----------------------------------------------------------------------------
--  CLEAR (POSIX SHELL COMMAND)
--
-- clear : clear the screen / reset the terminal screen
-- Syntax: clear
-----------------------------------------------------------------------------

procedure clear( ap : argumentListPtr ) is
  term_id : identifier;
begin
  if ap'length /= 0 then
     err( "zero argument expected" );
  elsif isExecutingCommand then
     findIdent( to_unbounded_string( "TERM" ), term_id );
     terminalClear( identifiers( term_id ).value.all );
  end if;
end clear;


-----------------------------------------------------------------------------
--  UMASK (POSIX SHELL COMMAND)
--
-- umask : set the umask
-- Syntax: umask
-----------------------------------------------------------------------------

procedure umask( ap : argumentListPtr ) is
  tempStr  : unbounded_string;
  newMask  : mode_t;
  oldMask  : mode_t;
  discard  : mode_t;
begin
  if rshOpt then
     err( "umask is not allowed in a " & optional_bold( "restricted shell" ) );
  elsif ap'length > 1 then
     err( "zero or one argument expected" );
  elsif ap'length = 0 then
     if isExecutingCommand then
        -- umask never fails
        oldMask := spar_os.umask( 0 );
        discard := spar_os.umask( oldMask );
        put_line( oldMask'img );
        -- TODO: we cannot guarantee that put_line will handle redirection
        -- properly.
     end if;
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     begin
        newMask := mode_t'value( to_string( tempStr ) );
        -- At least in Linux,the umask can only be the file
        -- permission bits (0777 = 511).
        if newMask > 511 then
           err( "value should be in range 0..511" );
        else
           -- umask never fails
           discard := spar_os.umask( newMask );
        end if;
     exception when constraint_error =>
        err( toSecureData( to_string( tempstr ) ) & " is not numeric");
     when others =>
        err_exception_raised;
     end;
  end if;
end umask;


-----------------------------------------------------------------------------
--  DELETE (SQL COMMAND)
--
-- delete : SQL delete
-- Syntax: delete shell_word
-----------------------------------------------------------------------------

procedure delete( ap : argumentListPtr ) is
  tempStr : unbounded_string;
begin
  if ap'length /= 1 then
     err( "one argument expected" );
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     if not engineOpen then
        err( "no database connection open" );
     elsif currentEngine = Engine_PostgreSQL then
#if POSTGRES
        DoSQLStatement( "delete " & tempStr );
#else
        err( "postgres support not configured" );
#end if;
     elsif currentEngine = Engine_MySQL then
#if MYSQL
        DoMySQLSQLStatement( "delete " & tempStr );
#else
        err( "mysql support not configured" );
#end if;
     else
        err( gnat.source_info.source_location & ": internal error: unrecognized database engine" );
     end if;
  end if;
end delete;


-----------------------------------------------------------------------------
--  DO HISTORY (POSIX SHELL COMMAND)
--
-- history: shell history control
-- history [-c | n]
-----------------------------------------------------------------------------

procedure do_history( ap : argumentListPtr ) is
  i            : integer;
  historyMax   : natural := 0;
  historyFirst : natural := 0;
  showHistory  : boolean := false;
  tempStr      : unbounded_string;
begin
  if ap'length = 0 then
     null;
  elsif ap'length /= 1 then
     err( "zero or one argument expected" );
     return;
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     if tempStr = "-c" then
        clearHistory;
        return;
     end if;
     historyMax := natural( to_numeric( tempStr ) );
     if historyMax > historyArray'last then
        historyMax := historyArray'last;
     end if;
  end if;

  -- If the user has requested a maximum number of lines (historyMax),
  -- then calculate the first line (historyFirst) to be shown.  If all
  -- should be shown, turn on showHistory flag immediately.

  if historyMax /= 0 then
     if historyNext - historyMax < 1 then
        historyFirst := historyArray'last - historyMax + historyNext;
     else
        historyFirst := historyNext- historyMax;
     end if;
  end if;
  showHistory := historyFirst = 0 or historyFirst = historyNext;

  -- Determine the starting point in the history array.  The history
  -- array wraps around to the first element when it has been filled.

  if historyNext = historyArray'last then
     i := 1;
  else
     i := historyNext + 1;
  end if;

  -- Walk the history array and show the contents.  Wrap around when the
  -- end of array is reached.

  loop
    if i = historyArray'last then
       i := 1;
    end if;
    exit when i = historyNext;
    if historyFirst = i then
       showHistory := true;
    end if;
    if length( history( i ).line ) > 0 then
       if showHistory then
          put( i'img );
          put( ": " );
          put( getDateString( history( i ).time ) );
          put( " " & utf_verticalLine & " " );
          put( history( i ).pwd );
          put( " " & utf_verticalLine & " " );
          put_line( history( i ).line );
       end if;
    end if;
    i := i + 1;
  end loop;
end do_history;


-----------------------------------------------------------------------------
--  INSERT (SQL COMMAND)
--
-- insert: SQL insert - add a row to a database table
-- Syntax: insert shell_word
-----------------------------------------------------------------------------

procedure insert( ap : argumentListPtr ) is
  tempStr : unbounded_string;
begin
  if ap'length /= 1 then
     err( "one argument expected" );
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     if not engineOpen then
        err( "no database connection open" );
     elsif currentEngine = Engine_PostgreSQL then
#if POSTGRES
        DoSQLStatement( "insert " & tempStr );
#else
        err( "postgres support not configured" );
#end if;
     elsif currentEngine = Engine_MySQL then
#if MYSQL
        DoMySQLSQLStatement( "insert " & tempStr );
#else
        err( "mysql support not configured" );
#end if;
     else
        err( gnat.source_info.source_location & ": internal error: unrecognized database engine" );
     end if;
  end if;
end insert;


-----------------------------------------------------------------------------
--  CD (POSIX SHELL COMMAND)
--
-- cd: change current directory
-- Syntax: cd - | shell_word
-----------------------------------------------------------------------------

procedure cd( ap : argumentListPtr ) is
  tempStr : unbounded_string;
begin
  if rshOpt then
     err( "cd is not allowed in a " & optional_bold( "restricted shell" ) );
  elsif ap'length /= 1 then
     err( "one argument expected" );
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     old_cd( tempStr );
  end if;
end cd;


-----------------------------------------------------------------------------
--  JOBS (POSIX SHELL COMMAND)
--
-- jobs: show a list of running background jobs
-- Syntax: jobs
-----------------------------------------------------------------------------

procedure jobs( ap : argumentListPtr ) is
-- jobs: list running jobs
begin
  if ap'length /= 0 then
     err( "no arguments expected" );
  elsif isExecutingCommand then
     putJobList;
  end if;
end jobs;


-----------------------------------------------------------------------------
--  PWD (POSIX SHELL COMMAND)
--
-- pwd: show the present (current) working directory
-- Syntax: pwd
-----------------------------------------------------------------------------

procedure pwd( ap : argumentListPtr ) is
-- pwd: present working directory (also updated current_working_directory)
begin
  if ap'length /= 0 then
     err( "no arguments expected" );
  elsif isExecutingCommand then
     put_line( old_pwd );
  end if;
end pwd;

-----------------------------------------------------------------------------
--  SELECT (SQL COMMAND)
--
-- select: SQL select - display rows from database tables
-- Syntax: select shell_word
-----------------------------------------------------------------------------

procedure SQLselect( ap : argumentListPtr ) is
-- SQL select: SQL select statement
  tempStr : unbounded_string;
begin
-- put_line( "length = " & ap'length'img ); -- DEBUG
-- if ap'length > 0 then
   -- put_line( "param = " & ap( 1 ).all );
-- end if;
  if ap'length /= 1 then
     err( "one argument expected" );
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     if not engineOpen then
        err( "no database connection open" );
     elsif currentEngine = Engine_PostgreSQL then
#if POSTGRES
        DoSQLSelect( "select " & tempStr );
#else
        err( "postgresql support not supported" );
#end if;
     elsif currentEngine = Engine_MySQL then
#if MYSQL
        DoMySQLSQLSelect( "select " & tempStr );
#else
        err( "mysql support not supported" );
#end if;
     else
        err( gnat.source_info.source_location & ": internal error: unrecognized database engine" );
     end if;
  end if;
end SQLselect;


-----------------------------------------------------------------------------
--  STEP (SparForte BUILTIN)
--
-- step: in breakout mode, run the next line and show a command prompt
-- Syntax: step
-----------------------------------------------------------------------------

procedure step( ap : argumentListPtr ) is
begin
  if ap'length /= 0 then
     err( "zero arguments expected" );
  elsif inputMode /= breakout then
     err( "step can only be used when you break out of a script" );
  elsif isExecutingCommand then
     done := true;
     breakoutContinue := true;
     stepFlag1 := true;
     put_trace( "stepping" );
  end if;
end step;


-----------------------------------------------------------------------------
--  DO TRACE (SparForte BUILTIN)
--
-- trace: turn source line tracing on or off, or show the current setting
-- Syntax: trace [true | false ]
-----------------------------------------------------------------------------

procedure do_trace( ap : argumentListPtr ) is
  tempStr : unbounded_string;
begin
  if ap'length = 0 then
     if isExecutingCommand then
        if trace then
           put_line( "Trace is currently on" );
        else
           put_line( "Trace is currently off" );
        end if;
     end if;
  elsif ap'length > 1 then
     err( "zero or one argument expected" );
  elsif isExecutingCommand then -- or syntax_check then -- when debugging
     -- true (boolean) will be a value of 1, but true (shell word) will be
     -- "true".  This is not ideal since it should really check types.
     tempStr := to_unbounded_string( ap( 1 ).all );
     if ( tempStr = "true" & ASCII.NUL ) or ( tempStr = "1" & ASCII.NUL ) then
        -- For security, don't trace in a production environment
        -- unless running in breakout input mode.  This is because
        -- tracing can reveal confidential information in variables.
        -- (Tracing can still be invoked via the command options.)
        -- It's also not allow in testing mode because it will catch
        -- it in continuous integration before going to production.
        -- GCC Ada 7.4 gives a conversion warning but is incorrect.
        if inputMode /= breakout and boolean(maintenanceOpt or testOpt) then
           err( "the trace command is not allowed in testing or maintenance phase mode unless at the breakout prompt" );
        else
           trace := true;
           put_line( "Trace is on" );
        end if;
     elsif ( tempStr = "false" & ASCII.NUL ) or ( tempStr = "0" & ASCII.NUL ) then
        trace := false;
        put_line( "Trace is off" );
     else
        err( "expected true or false" );
     end if;
  end if;
end do_trace;


-----------------------------------------------------------------------------
--  UNSET (POSIX SHELL COMMAND)
--
-- unset: remove an identifier from the symbol table
-- Syntax: unset identifier
-- Note: this uses a word, not an identifier token as in older versions of
-- SparForte.  If SparForte becomes more complex, this may need to be redesigned.
-----------------------------------------------------------------------------

procedure unset( ap : argumentListPtr ) is
  tempStr : unbounded_string;
  identToUnset : identifier;
begin
  if rshOpt then
     err( "unset is not allowed in a " & optional_bold( "restricted shell" ) );
  elsif ap'length /= 1 then
     err( "one argument expected" );
  elsif inputMode /= interactive and inputMode /= breakout then
     err( "unset is only allowed in an interactive session" );
  elsif onlyAda95 then
     err( "unset is not allowed with " & optional_bold( "pragma ada_95" ) );
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     findIdent( tempStr, identToUnset );
     if identToUnset = eof_t then
        -- it is possible a mistaken variable substitution could reveal data
        err( "identifier " & toProtectedValue(( tempStr )) & " not declared" );
     elsif boolean(rshOpt) and then identifiers( identToUnset ).name = "PATH" then
        err( "unsetting PATH is not allowed in a " &
          optional_bold( "restricted shell" ) );
     elsif boolean(rshOpt) and then identifiers( identToUnset ).name = "HOME" then
        err( "unsetting HOME is not allowed in a " &
          optional_bold( "restricted shell" ) );
     elsif boolean(rshOpt) and then identifiers( identToUnset ).name = "PWD" then
        err( "unsetting PWD is not allowed in a " &
          optional_bold( "restricted shell" ) );
     elsif boolean(rshOpt) and then identifiers( identToUnset ).name = "OLDPWD" then
        err( "unsetting OLDPWD is not allowed in a " &
          optional_bold( "restricted shell" ) );
     elsif identifiers( identToUnset ).renamed_count > 0 then
        err_renaming( identToUnset );
     elsif isExecutingCommand then
        -- record? delete any fields first (notice not recursive)
        if identifiers( identToUnset ).kind = root_record_t then
           for i in keywords_top..identifiers_top - 1 loop
               if identifiers( i ).field_of = identToUnset and not identifiers( i ).deleted then
                if not deleteIdent( i ) then
                     err( "unable to unset identifier field " & toProtectedValue( identifiers( i ).name ) );
                  end if;
               end if;
           end loop;
        -- single dimensional array.  Free dynamic memory. (notice not recursive)
        -- Removed 11/03/25 - this already done by  delete ident
        --elsif identifiers( identToUnset ).list then
        --   clearArray( arrayID( to_numeric( identifiers( identToUnset ).value ) ) );
        end if;
        if not deleteIdent( identToUnset ) then
           err( "unable to unset identifier" );
        end if;
     end if;
  end if;
end unset;


-----------------------------------------------------------------------------
--  ENV (POSIX SHELL COMMAND)
--
-- env: show the attributes of one/all identifier(s) from the symbol table
-- Syntax: env [identifier]
-- Note: this uses a word, not an identifier token as in older versions of
-- SparForte.  If SparForte becomes more complex, this may need to be redesigned.
-----------------------------------------------------------------------------

procedure env( ap : argumentListPtr ) is
  tempStr : unbounded_string;
  identToShow : identifier;
begin
  if rshOpt then
     err( "env is not allowed in a " & optional_bold( "restricted shell" ) );
  elsif ap'length > 1 then
     err( "zero or one argument expected" );
  -- elsif inputMode /= interactive and inputMode /= breakout then
  --    err( "env is only allowed in an interactive session" );
  elsif isExecutingCommand then
     if ap'length = 0 then
        put_all_identifiers;
     else
        tempStr := to_unbounded_string( ap( 1 ).all );
        if length( tempStr ) <= 1 then
           err( gnat.source_info.source_location & ": internal error: name of identifier to find is empty" );
        else
           -- remove ASCII.NUL from C string
           delete( tempStr, length( tempStr ), length( tempStr ) );
           findIdent( tempStr, identToShow );
           if identToShow = eof_t then
              -- it is possible a mistaken variable substitution could reveal data
              err( "identifier " & toProtectedValue( tempStr ) & " not declared" );
           elsif boolean(rshOpt) and then identifiers( identToShow ).name =  "PATH" then
              err( "env PATH is not allowed in a " &
                optional_bold( "restricted shell" ) );
           elsif boolean(rshOpt) and then identifiers( identToShow ).name = "HOME" then
              err( "env HOME is not allowed in a " &
                 optional_bold( "restricted shell" ) );
           elsif boolean(rshOpt) and then identifiers( identToShow ).name = "PWD" then
              err( "env PWD is not allowed in a " &
                optional_bold( "restricted shell" ) );
           elsif boolean(rshOpt) and then identifiers( identToShow ).name = "OLDPWD" then
              err( "env OLDPWD is not allowed in a " &
                optional_bold( "restricted shell" ) );
           elsif isExecutingCommand then
              Put_Identifier( identToShow );
           end if;
        end if;
     end if;
  end if;
exception
   -- DEVICE ERROR is typically a broken pipe... e.g. env | head . If it
   -- occurs, just stop outputing and exit.
   when DEVICE_ERROR => null;
end env;


-----------------------------------------------------------------------------
--  UPDATE (SQL COMMAND)
--
-- update: SQL update - update rows in a database table
-- Syntax: update shell_word
-----------------------------------------------------------------------------

procedure update( ap : argumentListPtr ) is
  tempStr : unbounded_string;
begin
  if ap'length /= 1 then
     err( "one argument expected" );
  elsif isExecutingCommand then
     tempStr := to_unbounded_string( ap( 1 ).all );
     delete( tempStr, length( tempStr ), length( tempStr ) );
     if not engineOpen then
        err( "no database connection open" );
     elsif currentEngine = Engine_PostgreSQL then
#if POSTGRES
        DoSQLStatement( "update " & tempStr );
#else
        err( "postgresql support not supported" );
#end if;
     elsif currentEngine = Engine_MySQL then
#if MYSQL
        DoMySQLSQLStatement( "update " & tempStr );
#else
        err( "mysql support not supported" );
#end if;
     else
        err( gnat.source_info.source_location & ": internal error: unrecognized database engine" );
     end if;
  end if;
end update;


-----------------------------------------------------------------------------
--  WAIT (POSIX SHELL COMMAND)
--
-- wait: wait for all background jobs to finish running
-- Syntax: wait
-----------------------------------------------------------------------------

procedure wait( ap : argumentListPtr ) is
begin
  if ap'length /= 0 then
     err( "zero arguments expected" );
  elsif isExecutingCommand then
     wait4children;
  end if;
end wait;


-----------------------------------------------------------------------------
--  VM (SparForte BUILTIN)
--
-- vm: show the interal state of the virtual machine
-- (Not yet implemented)
-- Syntax: vm nr n | sr n | ir n
-----------------------------------------------------------------------------

procedure vm( regtype, regnum : unbounded_string ) is
--  r : aVMRegister;
begin
   err( "not yet written" );
--  if to_string( regtype ) = "nr" then
--     r := aVMRegister'value( " " & to_string( regnum ) );
--     put( "numeric register " & r'img & " = " );
--     put_line( VMNR( aVMNRNumber( r ) ) );
--  elsif to_string( regtype ) = "sr" then
--     put( "string register " & r'img & " = " );
--     r := aVMRegister'value( " " & to_string( regnum ) );
--     put_line( VMSR( aVMSRNumber( r ) ) );
--  elsif to_string( regtype ) = "ir" then
--     put( "index register " & r'img & " = " );
--     r := aVMRegister'value( " " & to_string( regnum ) );
--     put_line( VMIR( aVMIRNumber( r ) )'img );
--     Put_Identifier( VMIR( aVMIRNumber( r ) ) );
--  else
--     put_line( "usage: vm nr|sr|ir, n" );
--  end if;
end vm;

end builtins;

