------------------------------------------------------------------------------
-- Scanner Resources                                                        --
--                                                                          --
-- Part of SparForte                                                        --
------------------------------------------------------------------------------
--                                                                          --
--            Copyright (C) 2001-2021 Free Software Foundation              --
--                                                                          --
-- This is free software;  you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 2,  or (at your option) any later ver- --
-- sion.  This is distributed in the hope that it will be useful, but WITH- --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License  distributed with this;  see file COPYING.  If not, write --
-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
-- MA 02111-1307, USA.                                                      --
--                                                                          --
-- This is maintained at http://www.pegasoft.ca                             --
--                                                                          --
------------------------------------------------------------------------------

with pegasoft.gen_list,
     Ada.Numerics.Long_Complex_Types,
     Ada.Strings.Unbounded,
     Ada.Containers.Doubly_Linked_Lists,
     Ada.Containers.Vectors,
     Unchecked_Deallocation,
     Interfaces.C,
     Gnat.Directory_Operations,
     Gnat.Dynamic_HTables,
#if POSTGRES
     APQ.PostgreSQL.Client,
#end if;
#if MYSQL
     APQ.MySQL.Client,
#end if;
#if BDB
     bdb,
#end if;
     spar_os.opengl,
     pegasock.tinyserve,
     world;
use  world,
     Ada.Numerics.Long_Complex_Types,
     Ada.Strings.Unbounded,
     Interfaces.C,
     Gnat.Directory_Operations,
     spar_os.opengl,
     pegasock.tinyserve;

package scanner_res is

-- This packages is a temporary measure to handle data structures that are
-- cannot be converted to strings.  They are stored here in a linked list
-- of variant records.  When the memory is released, the cleanup functions
-- appropriate for that resource are called.
--
-- This package will be obsolete when the symbol table rewrite is finished.
------------------------------------------------------------------------------

-- Resources
------------------------------------------------------------------------------

-- Resource Types
--
-- An enumerated list of all the types of resources handled here.
-- These are defined even when support has been disabled.

type aResourceType is (
   none,
   mysql_connection,
   mysql_query,
   postgresql_connection,
   postgresql_query,
   complex_number,
   directory,
   memcache_connection,
   pen_canvas,
   doubly_linked_string_list,
   doubly_linked_string_list_cursor,
   vector_string_list,
   vector_string_list_cursor,
   dynamic_string_hash_table,
   gl_byte_array,
   gl_short_array,
   gl_int_array,
   gl_float_array,
   gl_double_array,
   btree_file,
   hash_file,
   recno_file,
   btree_cursor,
   hash_cursor,
   recno_cursor,
   tinyserve_socket_server
);

--- Resource Defnitions
--
-- Generic instantiations or other resources that are not directly available
-- from the packages used

-- Singly Linked String Lists (Vectors)

type vector_index is new natural;

package vector_string_lists is new Ada.Containers.Vectors( vector_index, unbounded_string, "=" );

-- Doubly Linked String Lists

package doubly_linked_string_lists is new Ada.Containers.Doubly_Linked_Lists( unbounded_string );

-- Dynamic String Hash Tables

--type Hash_Position is new long_integer range 0.. 4_294_967_295; -- 2^32-1
type Hash_Position is new integer range 0.. 65_535; -- 2^32-1

function String_Hash( key : unbounded_string ) return Hash_Position;

package dynamic_string_hash_tables is
   new Gnat.Dynamic_HTables.Simple_HTable(
      Hash_Position,
      unbounded_string,
      null_unbounded_string,
      unbounded_string,
      String_Hash,
      "="
);

-- Berkeley DB B-Tree File

#if BDB
type btree_file_type is record
    session : bdb.berkeley_session;
    env     : bdb.berkeley_environment;
    isOpen  : boolean := false;
    name    : unbounded_string;
    envhome : unbounded_string;
end record;

type btree_cursor_type is record
     cursor  : bdb.berkeley_cursor;
     isOpen  : boolean := false;
     session : bdb.berkeley_session;
end record;

type hash_file_type is record
    session : bdb.berkeley_session;
    env     : bdb.berkeley_environment;
    isOpen  : boolean := false;
    name    : unbounded_string;
    envhome : unbounded_string;
end record;

type hash_cursor_type is record
     cursor  : bdb.berkeley_cursor;
     session : bdb.berkeley_session;
     isOpen  : boolean := false;
end record;

type recno_file_type is record
    session : bdb.berkeley_session;
    env     : bdb.berkeley_environment;
    isOpen  : boolean := false;
    name    : unbounded_string;
    envhome : unbounded_string;
end record;

-- TODO: recno cursor_type

#end if;

--- Resource Handle
--
-- A variant record for different types of resources.  This includes the
-- resource (typically a record of some kind), the block level in the
-- stack it was declared in.

type resHandle( rt : aResourceType ) is record
     --id         : natural; -- TBD
     blocklvl   : block;                      -- declaration block

     case rt is
     when mysql_connection =>
#if MYSQL
          c : APQ.MySQL.Client.Connection_Type;
#else
          null; -- MySQL support not enabled
#end if;
     when mysql_query =>
#if MYSQL
          q : APQ.MySQL.Client.Query_Type;
#else
          null; -- MySQL support not enabled
#end if;
     when postgresql_connection =>
#if POSTGRES
          pg_c : APQ.PostgreSQL.Client.Connection_Type;
#else
          null; -- PostgreSQL support not enabled
#end if;
     when postgresql_query =>
#if POSTGRES
          pg_q : APQ.PostgreSQL.Client.Query_Type;
#else
          null; -- PostgreSQL support not enabled
#end if;
     when complex_number =>
          cn : Complex;
     when directory =>
          dir : Dir_Type;
     when memcache_connection => null;
     when pen_canvas => null;
     when vector_string_list =>
          vslVector : vector_string_lists.Vector;
     when vector_string_list_cursor =>
          vslCursor : vector_string_lists.Cursor;
     when doubly_linked_string_list =>
          dlslList : doubly_linked_string_lists.List;
     when doubly_linked_string_list_cursor =>
          dlslCursor : doubly_linked_string_lists.Cursor;
     when dynamic_string_hash_table =>
          dsht : dynamic_string_hash_tables.Instance;
     when gl_byte_array =>
          gl_ba : GL_Byte_Array_Access;
     when gl_short_array =>
          gl_sa : GL_Short_Array_Access;
     when gl_int_array =>
          gl_ia : GL_Int_Array_Access;
     when gl_float_array =>
          gl_fa : GL_Float_Array_Access;
     when gl_double_array =>
          gl_da : GL_Double_Array_Access;
     when btree_file =>
#if BDB
          btree : btree_file_type;
#else
          null; -- no Berkeley DB
#end if;
     when hash_file =>
#if BDB
          hash : hash_file_type;
#else
          null; -- no Berkeley DB
#end if;
     when recno_file =>
#if BDB
          recno : recno_file_type;
#else
          null; -- no Berkeley DB
#end if;
     when btree_cursor =>
#if BDB
          btree_cur : btree_cursor_type;
#else
          null; -- no Berkeley DB
#end if;
     when hash_cursor =>
#if BDB
          hash_cur : hash_cursor_type;
#else
          null; -- no Berkeley DB
#end if;
     when recno_cursor =>
#if BDB
          recno_cur : bdb.berkeley_cursor;
#else
          null; -- no Berkeley DB
#end if;
     when tinyserve_socket_server =>
          tinyserve_server : pegasock.tinyserve.aSocketServer;
     when none => null;
     end case;

end record;

-- A pointer to the variant record

type resPtr is access all resHandle;

procedure free is new Unchecked_Deallocation( resHandle, resPtr );

-- Resource Handle List
--
-- List is a linked list of resources
------------------------------------------------------------------------------

--function resSort( left, right : resPtr ) return boolean;
--package resHandleList is new gen_list( resPtr, resSort, "=" );
--
type resHandleID is private;

function to_unbounded_string( id : resHandleID ) return unbounded_string;
pragma inline( to_unbounded_string );

function to_resource_id( val : unbounded_string ) return resHandleID;
pragma inline( to_resource_id );

procedure declareResource( id : out resHandleID; rt : aResourceType; blocklvl : block; max_length : size_t := 0 );
-- create a resource

procedure findResource( id : resHandleID; rp : out resPtr );
-- retrieve a specific resource

--procedure saveResource( id : resHandleID; rp : in resPtr );
---- save a specific resource

procedure putResource( rp : resPtr );
-- display a resource for debugging.

procedure clearResource( id : resHandleID );
-- destroy a resource

procedure pullResourceBlock( blocklvl : block );
-- destroy all resources in a block when a block is exited

PRIVATE

function resSort( left, right : resPtr ) return boolean;
package resHandleList is new pegasoft.gen_list( resPtr, resSort, "=" );

type resHandleID is new resHandleList.AListIndex;

end scanner_res;

