#!/bin/bash
# Configure script
# by Ken O. Burtch
#
# For environment variables that affect this script, see the INSTALL file.
#
# This Bourne shell script was written on Bash but should support most
# Bourne shell variants, including ksh.  FreeBSD will fail using the
# default tcsh (which is based on csh and is not Bourne shell compatible).
#set -eu

# When this command was run (assumed to be build date)
CONFIGBUILDDATE=`date "+%y%m%d"`

# Default, this is not a release version
CONFIGRELEASED="false"

# Default installation prefix
PREFIX="/usr/local"

# Default man page installation prefix
MANPREFIX="/usr/local"

# This will have "sudo" if required for ldconfig
LDCONFIG_SUDO=

# These variables may be passed into this script from the environment.
#
# For example, ARCH=i386 ./configure
# Or export ARCH=i386; ./configure
#
# ARCH        - the hardware architecture
# GMAKE       - the GNU make command to use
# PREFIX      - the installation prefix
# MANPREFIX   - the man page directory prefix
# DEV_SHM     - request to use /dev/shm
# NO_BDB      - request to disable Berkeley DB
# NO_MYSQL    - request to disable MySQL
# NO_OPENGL   - request to disable OpenGL
# NO_PCRE     - request to disable PCRE library
# NO_POSTGRES - request to disable PostgreSQL
# NO_READLINE - request to use old Ada input routines not readline
# NO_SOUND    - request to disable sound support

NO_GCGI=1
# Gnat.CGI is default "no"
# Gnat CGI breaks some SparForte features when enabled
# It must be enabled by a configuration option

# Get command line options
#
# Throughout this script, true is non-blank, and false is blank.  These
# variables may be passed in from the environment (as described in the
# INSTALL file).  Any configure options overrides them here.

while [ $# -gt 0 ] ; do
  TMP=`echo "$1" | cut -d= -f1`
  if [ -z "$TMP" ] ; then
     $TMP="$1"
  fi
  case "$TMP" in
  -h|--help)
      echo "SparForte configuration script"
      echo
      echo "Additional options:"
      echo "  --arch=ARCH           hardware architecture"
      echo "                        Examples: alpha, armv6l (Pi), athlon, i386"
      echo "                        (base Intel 32-bit), x86_64 (base Intel"
      echo "                        64-bit), core2, corei7, nocona, etc."
      echo "  --make=MAKE           name of GNU make"
      echo "  --prefix=PREFIX       root installation directory"
      echo "  --manprefix=MANPREFIX man page install directory"
      echo "  --released            true if not a dev version"
      echo "  --with-gnat-cgi       enable GNAT.CGI support"
      echo "  --without-bdb         disable Berkeley DB support"
      echo "  --without-mysql       disable MySQL support"
      echo "  --without-opengl      disable OpenGL support"
      echo "  --without-pcre        disable PCRE library support"
      echo "  --without-postgres    disable PostgreSQL support"
      echo "  --without-readline    disable GNU readline support"
#      echo "  --without-sdl"
      echo "  --without-sound       disable OSS sound support"
      echo
      echo "Read INSTALL for further information on these options"
      exit 0
      ;;
  --arch)
      ARCH=`echo "$1" | cut -d= -f2`
      ;;
  --make)
      GMAKE=`echo "$1" | cut -d= -f2`
      ;;
  --prefix)
      PREFIX=`echo "$1" | cut -d= -f2`
      ;;
  --manprefix)
      MANPREFIX=`echo "$1" | cut -d= -f2`
      ;;
  --released)
      CONFIGRELEASED="true"
      ;;
  --with-gnat-cgi)
      NO_GCGI=
      ;;
  --without-bdb)
      NO_BDB=1
      ;;
  --without-mysql)
      NO_MYSQL=1
      ;;
  --without-opengl)
      NO_OPENGL=1
      ;;
  --without-pcre)
      NO_PCRE=1
      ;;
  --without-postgres)
      NO_POSTGRES=1
      ;;
  --without-readline)
      NO_READLINE=1
      ;;
  # gnatmake -D copies files to a new directory, but does not delete them
  # afterwards.  So using /dev/shm doesn't seem to speedup compilation.
  #--with-devshm)
  #    # Check for Linux RAM disk
  #    if [ ! -d "/dev/shm" ] ; then
  #       echo "/dev/shm not found"
  #       exit 192
  #    fi
  #    if [ ! -w "/dev/shm" ] ; then
  #       echo "/dev/shm not writable"
  #       exit 192
  #    fi
  #    # Create a sparforte subdirectory
  #    if [ ! -d "/dev/shm/sparforte" ] ; then
  #       mkdir "/dev/shm/sparforte"
  #       if [ $? -ne 0 ] ; then
  #          echo "unable to make /dev/shm/sparforte"
  #          exit 192
  #       fi
  #    fi
  #    if [ ! -w "/dev/shm/sparforte" ] ; then
  #       echo "/dev/shm/sparforte not writable"
  #       exit 192
  #    fi
  #    DEV_SHM=1
  #    ;;
  --without-sound)
      NO_SOUND=1
      ;;
# Unused RPM options
# When building an RPM on OpenSUSE, many unnecesssary options were passed
# to configure.  I'm not sure what they all mean.  Silently ignore them,
# with the exception of mandir which we treat as manprefix.
 --host) echo "--host not used" ;;
 --build) echo "--build not used" ;;
 --program-prefix) echo "--program-prefix not used" ;;
 --exec-prefix) echo "--exec-prefix not used" ;;
 --bindir) echo "--binddir not used" ;;
 --sbindir) echo "--sbindir not used" ;;
 --sysconfdir) echo "--sysconfdir not used" ;;
 --datadir) echo "--datadir not used" ;;
 --includedir) echo "--includedir not used" ;;
 --libdir) echo "--libdir not used" ;;
 --libexecdir) echo "--libexecdir not used" ;;
 --localstatedir) echo "--localdatedir not used" ;;
 --sharedstatedir) echo "--sharedstatedir not used" ;;
 --disable-dependency-tracking) echo "--disable-dependency-tracking not used" ;;
 --mandir)
      MANPREFIX=`echo "$1" | cut -d= -f2`
      ;;
 --infodir) echo "--infodir not used" ;;
 --target) echo "--infodir not used" ;;
  *)
      echo "Unrecognized option $TMP"
      exit 192
  esac
  shift
done

# Debian warning

if [ -f "/etc/issue" ] ; then
   TMP=`fgrep Ubuntu /etc/issue`
   if [ "$TMP" != "" ] ; then
      DISTRO="ubuntu"
   fi
   TMP=`fgrep Mint /etc/issue`
   if [ "$TMP" != "" ] ; then
      DISTRO="ubuntu"
   fi
fi

if [ -z "$DISTRO" ] ; then
   if test -f "/etc/debian_version" ; then
      echo "Debian users"
      echo
      echo "This script uses sudo.  You may need to add your login to the"
      echo "sudoers configuration file.  Press return to continue."
      read TMP
      LDCONFIG_SUDO=sudo
   fi
fi

# Configure SparForte
#
# The sleep 1 is to make the messages more readable.

echo "Configuring SparForte..."
sleep 1
echo

# As per Fedja B, use Git version for build date, if available.

(exec git --version >/dev/null 2>/dev/null)
if [ $? -eq 0 ] ; then
   CONFIGBUILDDATE=`git describe`
   echo "Using Git version for build date string... $CONFIGBUILDDATE"
else
   echo "Using current date for build date string... $CONFIGBUILDDATE"
fi

# Dash shell test
# Dash does not have "let".

echo -n "Checking for Bourne-compatible default shell... "
(exec /bin/sh -c 'let x=1' >/dev/null 2>/dev/null)
if [ $? -ne 0 ] ; then
   echo "no"
   echo
   echo "/bin/sh is not a Bourne-compatible shell"
   echo "Some Debian-based systems use the Dash shell by default."
   echo "Change the symbolic link /bin/sh to redirect to a"
   echo "Bourne-compatible shell like /bin/bash or /bin/ksh."
   exit 192
else
   echo "yes"
fi

# Check for pkg-config command
#
# PKGCONFIG is non-blank if it is found

PKGCONFIG="pkg-config"
echo -n "checking for pkg_config... "
(exec $PKGCONFIG --version >/dev/null 2>/dev/null)
if [ $? -ne 0 ] ; then
   PKGCONFIG=""
   echo "no"
else
   echo "yes"
fi

# Check for GNU locate command
#
# LOCATE is set to the name of the locate command

LOCATE="glocate"
echo -n "checking for locate ($LOCATE)... "
"$LOCATE" --help >/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then
  echo "no"
  LOCATE="locate"
  "$LOCATE" --help >/dev/null 2>/dev/null
  if [ $? -ne 0 ] ; then
     LOCATE="locate"
     echo -n "checking for locate ($LOCATE)... "
     "$LOCATE" /bin/true >/dev/null 2>/dev/null
     if [ $? -ne 0 ] ; then
        echo "no"
        # freebsd 8 has different parameters
        "$LOCATE" thisisafakepatternbecausefreebsdlocatehasnohelp >/dev/null 2>/dev/null
     else
        echo "yes"
     fi
  else
     echo "yes"
  fi
else
  echo "yes"
fi
if [ $? -ne 0 ] ; then
   echo "Could not run locate"
   echo
   echo "Locate is used by this script to ensure you have all the required"
   echo "software to build SparForte."
   echo
   echo "Please install GNU locate and run updatedb (as root)."
   exit 1
fi

# OS Environment
#
# The name of the operating system, such as linux, darwin, cygwin, etc.

cd src
echo -n "checking for OS (uname -s)... "
OS=`uname -s 2>/dev/null`
if [ $? -ne 0 ] ; then
   echo "failed"
   echo
   echo "Could not run uname -s"
   exit 1
fi
TMP=`echo "$OS" | cut -c1-6`
if [ "$TMP" = "CYGWIN" ] ; then
   OS="cygwin"
fi
if [ "$TMP" = "Darwin" ] ; then
    OS="darwin"
fi
echo "yes"

# CPU architecture
#
# Use an ARCH variable if one exists.  Otherwise, determine the operating
# system type and processor architecture type by uname.

echo -n "checking for architecture (\$ARCH)... "
if [ -z "$ARCH" ] ; then
   echo "no"
   echo -n "checking for architecture (uname -p and -m)... "
   ARCH=`uname -p 2>/dev/null`
   if [ $? -ne 0 ] ; then   # Cygwin runs but says unknown
      ARCH="unknown"
   fi
   if [ "$ARCH" = "unknown" ] ; then
      ARCH=`uname -m 2>/dev/null`
      if [ $? -ne 0 ] ; then
         echo "failed"
         echo
         echo "Could not run uname -p or -m. Use --arch to specify your architecture."
         echo "For example, export --arch=core2"
         exit 1
      fi
   fi
fi
echo "yes"

# Display the Operating System and the CPU Architecture
#
# These will determine which spar_os binding file to use.

echo -n "making for... "
# The ARCH comes from uname and indicates the version of Linux, not the
# actual processor being used.  There's a lot of aliases for Intel
# Pentium-4-ish processors.  Not all appear here.  CPU_ARCH is used to
# determine the spar_os binding file...we don't necessarily have one for
# every architecture.
# Intel 32-bit Pentium
if [ "$ARCH" = "i486" ] ; then
   CPU_ARCH="i386"
elif [ "$ARCH" = "i586" ] ; then
   CPU_ARCH="i386"
elif [ "$ARCH" = "i686" ] ; then
   CPU_ARCH="i386"
elif [ "$ARCH" = "athlon" ] ; then # Intel-ish
   CPU_ARCH="i386"
elif [ "$ARCH" = "amd64" ] ; then # FreeBSD 10
   export ARCH="athlon64"
   CPU_ARCH="i386"
# Intel 64-bit Pentium
elif [ "$ARCH" = "x86_64" ] ; then
   # There is no "x86_64" CPU option.  However, Athlon 64 is an early
   # 64-bit CPU that has instructions also supported by Intel processors.
   # so "athlon64" is generic 64-bit Intel/AMD CPU.
   export ARCH="athlon64" # Fedora: x86_64 isn't valid gcc option
   CPU_ARCH="i386"
elif [ "$ARCH" = "nocona" ] ; then
   # Original Pentium 64-bit with MMX, SSE...SSE3 extensions
   # Should only appear if --arch is used
   CPU_ARCH="i386"
elif [ "$ARCH" = "core2" ] ; then
   # Intel Core 2 64-bit with MMX, SSE...SSSE3 extensions
   # Should only appear if --arch is used
   CPU_ARCH="i386"
elif [ "$ARCH" = "corei7" ] ; then
   # Intel Core i7 Version 1 64-bit with MMX, SSE...SSE4.2 extensions
   # Should only appear if --arch is used
   CPU_ARCH="i386"
# Other processors
elif [ "$ARCH" = "alpha" ] ; then
   CPU_ARCH="alpha"
elif [ "$ARCH" = "armv6l" ] ; then
   # Rasp Pi: First, ARM 6L not a GCC option.  Second, not all Debian
   # packages build with an CPU march flag more specific than generic
   # v6.
   CPU_ARCH="armv6"
   ARCH="armv6"
elif [ "$ARCH" = "armv7l" ] ; then
   # Rasp Pi 3: First, ARM 7L not a GCC option.  Second, not all Debian
   # packages build with an CPU march flag more specific than generic
   # v6.
   CPU_ARCH="armv6"
   ARCH="armv6"
else
   CPU_ARCH="$ARCH"
fi
CPU_FLAG="-march"
# Determine the correct OS binding to use and the correct -march
# compiler flag.  Newer versions of Linux
# support -march=native but this is not yet supported on the Raspberry
# Pi.  Apparently there are several different Debian flavours for the
# Pi.  I've only tested it on the one using armv6l.
if [ "$OS" = "Linux" -a "$CPU_ARCH" = "armv6" ] ; then
   echo -n "Linux/ARM6 (assuming Raspberry Pi)"
   if test -r spar_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      # The standard linux file works with the Pi
      cp os_bindings/spar_linux.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
   # Rasp Pi FAQ: these C flags should be used.  However, they must be applied
   # to the entire application and I don't have a way to pass them to the
   # third-party libraries.  However, I document them here.
   #CFLAGSTYPE="-mfpu=vfp -mfloat-abi=hard"
   # GCC Ada 4.6's Gnatmake crashes on GCC -m switches on cargs
   #GMCARGSSUB="-mfpu=vfp -mfloat-abi=hard"
elif [ "$OS" = "Linux" -a "$CPU_ARCH" = "armv7" ] ; then
   echo -n "Linux/ARM7 (assuming Raspberry Pi 3)"
   if test -r spar_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      # The standard linux file works with the Pi
      cp os_bindings/spar_linux.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
   # Rasp Pi FAQ: these C flags should be used.  However, they must be applied
   # to the entire application and I don't have a way to pass them to the
   # third-party libraries.  However, I document them here.
   #CFLAGSTYPE="-mfpu=vfp -mfloat-abi=hard"
   # GCC Ada 4.6's Gnatmake crashes on GCC -m switches on cargs
   #GMCARGSSUB="-mfpu=vfp -mfloat-abi=hard"
elif [ "$OS" = "Linux" -a "$CPU_ARCH" = "i386" ] ; then
   echo -n "Linux/Intel/AMD"
   if test -r spar_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      cp os_bindings/spar_linux.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
elif [ "$OS" = "FreeBSD" -a "$CPU_ARCH" = "i386" ] ; then
   echo -n "FreeBSD/Intel/AMD"
   if test -r spar_os.ads ; then
      echo " (cached)";
   else
      echo
      cp os_bindings/spar_freebsd.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
   CFLAGSTYPE="-DFREEBSD"
elif [ "$OS" = "Linux" -a "$CPU_ARCH" = "alpha" ] ; then
   echo -n "Linux/Alpha"
   if test -r spar_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      cp os_bindings/spar_alpha.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
   ARCH="ev5"
   CPU_FLAG="-mcpu"  # -march not supported on alpha
elif [ "$OS" = "HPUX" ] ; then
   echo -n "HP-UX"
   if test ! -w spar_os.ads ; then
      echo " (cached)";
   else
      echo
      cp os_bindings/spar_hp.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
      cp os_bindings/spar_hp.adb spar_os.adb
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
   echo "  (Warning: SparForte HP-UX support is obsolete...you will need to edit bush_hp.ads/adb)"
elif [ "$OS" = "cygwin" ] ; then
   echo -n "Cygwin"
   if test -r spar_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      cp os_bindings/spar_cygwin.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
elif [ "$OS" = "darwin" ] ; then
   echo -n "Darwin"
   if test -r spar_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      cp os_bindings/spar_darwin.ads spar_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate spar_os source files"
         exit 1
      fi
   fi
else
   echo "unknown"
   echo
   echo "I couldn't identify your operating system."
   echo
   echo "SparForte requires a spar_os.ads file to make operating system calls."
   echo "If I made a mistake and your O/S is supported, manually copy"
   echo "a spar_* file to spar_os.  If you're operating system isn't supported"
   echo "and if you are experienced and have time, you can create a new"
   echo "spar_os.ads for your operating system.  Consult the Hacker's Guide"
   echo "in the documentation on how to port SparForte to a new operating system."
   exit 1
fi

# Check compiler
#
# CC is set to the name of the compiler

if test -f spar_os.ali ; then
   if test ! -w spar_os.ali ; then
      echo "spar_os.ali exists and is not writable...please remove it"
      exit 1
   fi
fi
echo -n "checking for gcc ... "
CC="gcc"
(exec $CC --version >/dev/null 2>/dev/null)
if [ $? -eq 0 ] ; then
   echo "yes"
else
   echo "no"
   exit 1
fi
echo -n "checking for gcc w/Ada (with gcc)... "
(exec $CC -c spar_os.ads >/dev/null 2>/dev/null)
#FreeBSD requires exec in a subshell because a command not found error
#is reported before the stderr redirect
echo "good"
if [ $? -eq 0 ] ; then
   echo "yes"
else
   echo "no"
   echo -n "checking for gcc w/Ada (with gnatgcc)... "
   CC="gnatgcc"
   (exec $CC -c spar_os.ads >/dev/null 2>/dev/null)
   if [ $? -eq 0 ] ; then
      echo "yes"
   else
      echo "no"
      echo -n "checking for gcc w/Ada (with adagcc)... "
      CC="adagcc"
      (exec $CC -c spar_os.ads >/dev/null 2>/dev/null)
      if [ $? -eq 0 ] ; then
         echo "yes"
      else
         echo "no"
         echo -n "checking for gcc w/Ada (with gcc-gnat)... "
         CC="gcc-gnat"
         $CC -c spar_os.ads >/dev/null 2>/dev/null
         if [ $? -eq 0 ] ; then
            echo "yes"
         else
            echo "no"
            echo
            echo "--------------------------------------------------------------------------"
            echo "Your system does not have a GCC compiler that understands the Ada language"
            echo
            echo "The name of the GCC package with Ada support depends on your operating system."
            echo "Examples:"
            echo " - Debian Linux users can try apt-get install gnat-3.3 (or similar)"
            echo " - Fedora Linux users can try add/remove software gcc-gnat"
            echo " - SuSE Linux   users can try add/remove software gcc-ada"
            echo
            echo "Specifically, SparForte requires one of the following:"
            echo " - GCC 3.x or newer with the Ada language enabled (http://gcc.gnu.org)"
            echo " - ACT's GNAT compiler 3.14 or newer, based on GCC 2.7.2 (ftp://cs.nyu.edu/pub/gnat)"
            echo
            echo "Please update your system and re-run this script."
            echo "--------------------------------------------------------------------------"
            exit 1
        fi
      fi
   fi
fi

# Check for the Ada Run-Time Library

echo -n "checking for libgnat (ldconfig -p, Linux)... "
TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | grep libgnat`
if [ -z "$TMP" ] ; then
   echo "no"
   echo -n "checking for libgnat (ldconfig -r, FreeBSD)... "
   TMP=`/sbin/ldconfig -r 2>/dev/null | grep adalib`
   # was libgnat.  For freebsd, just settle on having adalib in the hints
   if [ -z "$TMP" ] ; then
      echo "no"
      # Some FreeBSD put libgnat under /usr/local/lib but doesn't show
      # up in ldconfig -r
      echo -n "checking in /usr/local/lib (e.g. some FreeBSD)... "
      TMP=`find /usr/local/lib -type f -name "libgnat*"`
      if [ ! -z "$TMP" ] ; then
         echo "yes"
      else
         echo "no"
         echo -n "checking for libgnat.dylib (Darwin)..."
         TMP=`"$LOCATE" adalib/libgnat.dylib`
         if [ ! -z "$TMP" ] ; then
             echo "yes"
         else
             echo "no"
             echo -n "checking for libgnat.dll.a (Cygwin)..."
             TMP=`"$LOCATE" adalib/libgnat | fgrep dll.a`
             if [ ! -z "$TMP" ] ; then
                 echo "yes"
             else
                 echo "no"
                 echo -n "checking for static libgnat.a only (e.g. Slackware)... "
                 # In some cases, this may return multiple files.
                 TMP=`"$LOCATE" adalib/libgnat`
                 if [ $? -eq 0 ] ; then
                    TMP2=`"$LOCATE" adalib/libgnat.a`
                 else
                    TMP2="fail-me"
                 fi
                 if [ "$TMP" = "$TMP2" ] ; then
                    echo "yes"
                     else
                    echo "no"
                    echo
                    echo "GCC Ada or GNAT is installed but the Ada Run-Time Environment"
                    echo "(libgnat) was not found.  If libgnat.so was installed, you"
                    echo "may need to run ldconfig (as root) to update the shared"
                    echo "library search paths.  You may need to edit ld.so.conf first"
                    echo "and add the path to libgnat's directory.  If libgnat.a was"
                    echo "installed, run updatedb (as root) and this script should"
                    echo "detect it."
                    echo
                    exit 1
                  fi
              fi
          fi
      fi
   else
      echo "yes"
   fi
 else
  echo "yes"
fi

# Test version of scanner-calendar for this GCC Ada

if test ! -d ../test ; then
   echo "test directory missing"
   exit 192
fi
cd ../test  # src to test
cp "../src/c_scanner.c" "c_scanner.c"
echo -n "compiling c calendar linkage function..."
(exec gcc -c c_scanner.c > /dev/null 2>/dev/null )
if [ $? -ne 0 ] ; then
   echo "no"
   echo
   echo "This is a copy of the __gnat_localtime_tzoff function (renamed to"
   echo "a __bush prefix).  The C compile failed."
   exit 192
else
   echo "yes"
fi
SCANNER_VERSION="scanner-calendar-latest"
echo -n "trying calendar $SCANNER_VERSION ..."
cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
(exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
if [ $? -ne 0 ] ; then
   echo "no"
   SCANNER_VERSION="scanner-calendar-pre441"
   echo -n "trying calendar $SCANNER_VERSION ..."
   cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
   cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
   (exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
   if [ $? -ne 0 ] ; then
      echo "no"
      SCANNER_VERSION="scanner-calendar-pre431"
      echo -n "trying calendar $SCANNER_VERSION ..."
      cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
      cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
      (exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
      if [ $? -ne 0 ] ; then
         echo "no"
         SCANNER_VERSION="scan-cal-gnat314"
         echo -n "trying calendar $SCANNER_VERSION ..."
         cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
         cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
         (exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
         if [ $? -ne 0 ] ; then
            echo "no"
            echo
            echo "no suitable version of scanner-calendar found"
            echo
            echo "scanner-calendar is a modified version of ada-calendar that"
            echo "has the time as a non-private time so time values can be stored in"
            echo "Bush variables.  If this is a newer version of Ada, you may"
            echo "need to provide your own version of scanner-calendar."
            exit 1
         else
            cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
            cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
            echo "yes"
         fi
      else
         cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
         cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
         echo "yes"
      fi
   else
      cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
      cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
      echo "yes"
   fi
else
   cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
   cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
   echo "yes"
fi
# clean test directory
rm *.o *.ali scanner_test
rm scanner-calendar*
rm c_scanner.c
cd ../src/

# Check for ncurses (which includes tput)

echo -n "checking for tput... "
# was init now clear since init no longer in freebsd?!
(exec tput clear >/dev/null 2>/dev/null)
if [ $? -eq 0 ] ; then
   echo "yes"
else
   echo "no"
   echo
   echo "tput is sometimes included with the ncurses library (e.g. Cygwin)."
   echo "Please install ncurses or another package with the tput command."
   exit 1
fi

# Check for libssl

echo -n "checking for libssl (ldconfig -p, Linux)... "
TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | fgrep libssl.so.`
if [ -z "$TMP" ] ; then
   echo "no"
   echo -n "checking for libssl.dylib (Darwin)..."
   TMP=`"$LOCATE" libssl.dylib`
   if [ ! -z "$TMP" ] ; then
       echo "yes"
   else
       echo "no"
       echo -n "checking for lib/openssl (Cygwin)..."
       TMP=`"$LOCATE" lib/openssl`
       if [ ! -z "$TMP" ] ; then
           echo "yes"
       else
           echo "no"
           echo
           echo "If you have libssl, it may be version specific"
           echo "Please make a general symbol link libssl.so to the "
           echo "correct version and run ldconfig to update the"
           echo "shared library list."
           exit 1
       fi
   fi
else
   TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | grep libssl.so`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo -n "checking for libssl (ldconfig -r, FreeBSD)... "
      TMP=`/sbin/ldconfig -r 2>/dev/null | grep libssl.so`
      if [ -z "$TMP" ] ; then
         echo "no"
         echo
         echo "Some database support requires libssl"
         # TODO: test for database...and abort...
      else
         echo "yes"
      fi
   else
      echo "yes"
   fi
fi

# Check for the libSDL (Simple DirectMedia Layer) Library

echo -n "checking for libSDL (ldconfig -p, Linux)... "
TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | grep libSDL`
if [ -z "$TMP" ] ; then
   echo "no"
   echo -n "checking for libSDL (ldconfig -r, FreeBSD)... "
   TMP=`/sbin/ldconfig -r 2>/dev/null | grep libSDL`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo -n "checking for libSDL (locate, Darwin)... "
      TMP=`"$LOCATE" libSDL libsdl`
      if [ ! -z "$TMP" ] ; then
          echo "yes"
      else
          echo "no"
          echo "No version of the Simple DirectMedia Layer (libSDL) was found"
          echo "If you have installed libSDL, you may need to use ldconfig (as"
          echo "root) to update the shared library search paths for libSDL"
          echo
          echo "libSDL is used by SparForte to access sound and graphics on your machine"
          exit 1
      fi
    else
       echo "yes"
    fi
 else
  echo "yes"
fi

if [ -z "$SDL_CONFIG" ] ; then
   SDL_CONFIG="sdl-config"
fi
echo -n "configuring SDL (SDL_config)... "
TMP=`(exec $SDL_CONFIG --version 2>/dev/null)`
if [ -z "$TMP" ] ; then
   echo "no"
   if [ -n "$PKGCONFIG" ] ; then
      echo -n "configuring SDL (pkg-config)... "
      # bundled SDL here
      SDLLIBS=`(exec $PKGCONFIG --libs sdl 2>/dev/null)`" -lSDL_image"
      SDLINCL=`(exec $PKGCONFIG --cflags sdl 2>/dev/null)`
      if [ $? -ne 0 ] ; then
         SDLLIBS=""
         SDLINCL=""
         echo "no"
      else
         echo "yes"
      fi
   fi
   if [ -z "$SDLLIBS" ] ; then
      echo "guessing at SDL configation (may be incorrect)... "
      # Cannot find SDL_config?  Use these defaults for makefile sed...
      if [ "$OS" = "FreeBSD" ] ; then
         SDLLIBS="-L/usr/local/lib -lSDL-1.1 -lSDL_image -lpthread"
         SDLINCL="-I/usr/local/include/SDL11"
      elif [ "$OS" = "darwin" ] ; then
         SDLLIBS="/Library/Frameworks/SDL.framework/SDL /Library/Frameworks/SDL_image.framework/SDL_image"
         SDLINCL="-I/Library/Frameworks/SDL.framework/Headers -I/Library/Frameworks/SDL_image.framework/Headers"
      else
         SDLLIBS="-L/usr/local/lib -lSDL -lSDL_image"
         SDLINCL="-I/usr/local/include/SDL"
      fi
   fi
else
   # Remove -D_REENTRANT (not recognized by GCC Ada)
   SDLLIBS=`$SDL_CONFIG --libs`" -lSDL_image"
   SDLINCL=`$SDL_CONFIG --cflags | sed "s/\ -D_REENTRANT//g"`
   echo "yes"
fi

# Escape special characters (space and slash)
SDLLIBSTYPE=`echo "$SDLLIBS" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
SDLINCLTYPE=`echo "$SDLINCL" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`

#if [ -z "$SDL_CONFIG" ] ; then
#   SDL_CONFIG="sdl-config"
#fi
#echo -n "checking for SDL_config... "
#TMP=`(exec $SDL_CONFIG --version 2>/dev/null)`
#if [ -z "$TMP" ] ; then
#   # Cannot find SDL_config?  Use these defaults for makefile sed...
#   if [ "$OS" = "FreeBSD" ] ; then
#      SDLLIBSTYPE="-L\/usr\/local\/lib -lSDL-1.1\ -lSDL_image -lpthread"
#      SDLINCLTYPE="-I\/usr\/local\/include\/SDL11"
#   else
#      SDLLIBSTYPE="-l\ SDL\ -l\ SDL_image"
#      SDLINCLTYPE="-I\/usr\/include\/SDL"
#   fi
#   echo "no"
#else
#   # Remove -D_REENTRANT (not recognized by GCC Ada) and escape special
#   # sed characters (space and slash)
#   SDLLIBSTYPE=`$SDL_CONFIG --libs`" -lSDL_image"
#   SDLLIBSTYPE=`echo "$SDLLIBSTYPE" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
#   SDLINCLTYPE=`$SDL_CONFIG --cflags | sed "s/\ -D_REENTRANT//g"`
#   SDLINCLTYPE=`echo "$SDLINCLTYPE" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
#   echo "yes"
#fi

# Bytes are aligned differently between 32-bit and 64-bit SDL data structures.
# Default to 64-bit else use 32-bit.

echo -n "selecting SDL binding... "
if test -r spar_os-sdl.ads ; then
   echo " (cached, make distclean to remove)";
else
   cd ../test
   if [ "$OS" = "darwin" ] ; then
      (exec "$CC" sdlversion.c $SDLINCL $SDLLIBS > /dev/null 2>/dev/null )
   else
      (exec "$CC" sdlversion.c -I/usr/local/include/SDL -L/usr/local/lib -lSDL)
   fi
   if [ -f "./a.exe" ] ; then # Cygwin makes Windows executables
      TMP=`./a.exe`
      rm ./a.exe
   elif [ -f "./a.out" ] ; then
      TMP=`./a.out`
      rm ./a.out
   fi
   cd ../src
   if [ "$TMP" = "32" ] ; then
      cp spar_os-sdl-32bit.ads spar_os-sdl.ads
      chmod u+w spar_os-sdl.ads
      echo "32 bit"
   elif [ "$TMP" = "64" ] ; then
      cp spar_os-sdl-64bit.ads spar_os-sdl.ads
      chmod u+w spar_os-sdl.ads
      echo "64 bit"
   else
      echo "unknown"
      echo
      echo "Unable to determine if 32-bit or 64-bit SDL is being used."
      echo "Do you have libSDL installed?"
      exit 192
   fi
fi

# Check for the libSDL_image (Simple DirectMedia Layer image loading) Library
# This is normally included with SDL but is not included with Fedora Core 4 Linux.

echo -n "checking for libSDL_image (ldconfig -p, Linux)... "
TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | grep libSDL_image`
if [ -z "$TMP" ] ; then
   echo "no"
   echo -n "checking for libSDL_image (ldconfig -r, FreeBSD)... "
   TMP=`/sbin/ldconfig -r 2>/dev/null | grep libSDL_image`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo -n "checking for libSDL_image (locate, Darwin)... "
      TMP=`"$LOCATE" libSDL_image`
      if [ ! -z "$TMP" ] ; then
          SDLLIBSTYPE="$SDLLIBSTYPE""\ -lSDL_image\ "
          echo "yes"
      else
          echo "no"
          echo -n "checking for default libSDL_image (grep, Darwin)... "
          TMP=`echo "$SDLLIBS" | grep SDL_image`
          if [ ! -z "$TMP" ] ; then
              echo "yes"
          else
              echo "No version of the Simple DirectMedia Layer image library (libSDL_Image) was found"
              echo "This auxillary library is normally included with libSDL."
              echo "Fedora users can install it using this command: yum install SDL_image"
              echo "If you have installed libSDL_image, you may need to use ldconfig (as"
              echo "root) to update the shared library search paths for libSDL_image"
              echo
              echo "libSDL_image is used by SparForte to load image files (JPEGs, GIFs, etc.)"
              exit 1
          fi
      fi
    else
       SDLLIBSTYPE="$SDLLIBSTYPE""\ -lSDL_image\ "
       echo "yes"
    fi
 else
  SDLLIBSTYPE="$SDLLIBSTYPE""\ -lSDL_image\ "
  echo "yes"
fi

# Check for the libSDL_ttf (Simple DirectMedia Layer truetype font) Library

#echo -n "checking for libSDL_ttf (ldconfig -p, Linux)... "
#TMP=`/sbin/ldconfig -p 2>/dev/null | grep libSDL_ttf`
#if [ -z "$TMP" ] ; then
#   echo "no"
#   echo -n "checking for libSDL_image (ldconfig -r, FreeBSD)... "
#   TMP=`/sbin/ldconfig -r 2>/dev/null | grep libSDL_ttf`
#   if [ -z "$TMP" ] ; then
#      echo "no"
#      echo -n "checking for libSDL_ttf (locate, Darwin)... "
#      TMP=`"$LOCATE" libSDL_ttf`
#      if [ ! -z "$TMP" ] ; then
#          SDLLIBSTYPE="$SDLLIBSTYPE""\ -lSDL_ttf\ "
#          echo "yes"
#      else
#          echo "no"
#          echo "No version of the Simple DirectMedia Layer truetype font library (libSDL_ttf) was found"
#          echo "This is a third-party  library not normally included with libSDL."
#          echo "Fedora users can install it using this command: yum install SDL_ttf"
#          echo "If you have installed libSDL_ttf, you may need to use ldconfig (as"
#          echo "root) to update the shared library search paths for libSDL_ttf"
#          echo
#          echo "libSDL_ttf is not currently used.  It will be used by the pen package to"
#          echo "to display text."
#          exit 1
#      fi
#    else
#       SDLLIBSTYPE="$SDLLIBSTYPE""\ -lSDL_ttf\ "
#       echo "yes"
#    fi
# else
#  SDLLIBSTYPE="$SDLLIBSTYPE""\ -lSDL_ttf\ "
#  echo "yes"
#fi

# Check for OpenGL
#
# HAS_OPENGL is non-blank if it is detected on the system

HAS_OPENGL=
echo -n "configuring OpenGL (pkg-config)... "
if [ -z "$NO_OPENGL" ] ; then
   if [ -n "$PKGCONFIG" ] ; then
      MESALIBSTYPE=`(exec $PKGCONFIG --libs gl glu 2>/dev/null)`
      TMP=$?
      MESALIBSTYPE=`echo "$MESALIBSTYPE" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
      MESAINCLTYPE=`(exec $PKGCONFIG --cflags gl glu 2>/dev/null)`
      MESAINCLTYPE=`echo "$MESAINCLTYPE" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
      if [ $TMP -ne 0 ] ; then
         MESALIBSTYPE=""
         MESAINCLTYPE=""
         echo "no"
         echo "guessing at OpenGL configation (may be incorrect)... "
         MESALIBSTYPE="-lGLU\ -lGL\ \ "
         MESAINCLTYPE="-I\/usr\/include\/libdrm\ \ "
      else
         HAS_OPENGL=1
         echo "yes"
      fi
   else
      echo "no"
      echo
      echo "guessing at OpenGL configation (may be incorrect)... "
      if [ "$OS" = "darwin" ]; then
          MESALIBSTYPE="-Wl,-framework,OpenGL"
          MESAINCLTYPE=""
      else
          MESALIBSTYPE="-lGLU\ -lGL\ \ "
          MESAINCLTYPE="-I\/usr\/include\/libdrm\ \ "
      fi
   fi
else
   echo "no"
fi

# Databases - PostgreSQL
#
# HAS_POSTGRES will be non-empty if support has been requested (NO_POSTGRES is
# not empty) and the database was found.
#
# Note: pg_config is used by APQ, but is for configuring the database server,
# not the client, and is technically the wrong tool.

echo -n "checking for postgresql (pg_config)..."
HAS_POSTGRES=
if [ -z "$NO_POSTGRES" ] ; then
   TMP=`(exec pg_config --version 2>/dev/null)`
   if [ -z "$TMP" ] ; then
      echo "no"
   else
	  HAS_POSTGRES=1
      echo "yes"
   fi
else
   echo "no"
fi

# Databases - MySQL
#
# HAS_MYSQL will be non-empty if support has been requested (NO_MYSQL is not
# empty) and the database was found.

HAS_MYSQL=
echo -n "checking for mysql (mysql_config)..."
if [ -z "$NO_MYSQL" ] ; then
   TMP=`(exec mysql_config --version 2>/dev/null)`
   if [ -z "$TMP" ] ; then
      echo "no"
   else
      HAS_MYSQL=1
      echo "yes"
   fi
else
   echo "no"
fi

# GNU Readline
#
# HAS_READLINE will be non-empty if support has been requested (NO_READLINE is
# not empty) and the library is found.
#
# There are many versions of readline

HAS_READLINE=
READLINE_VERSION=
if [ -z "$NO_READLINE" ] ; then
   echo -n "checking for readline 6 (ldconfig -p, Linux)... "
   TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | grep libreadline.so.6`
   if [ -z "$TMP" ] ; then
      echo "no"
   else
      HAS_READLINE=1
      READLINE_VERSION=6
      echo "yes"
   fi
   if [ -z "$READLINE_VERSION" ] ; then
      echo -n "checking for readline 8 (ldconfig -p, Linux)... "
      TMP=`$LDCONFIG_SUDO sudo /sbin/ldconfig -p 2>/dev/null | grep libreadline.so.8`
      if [ -z "$TMP" ] ; then
         echo "no"
      else
         HAS_READLINE=1
         READLINE_VERSION=8
         echo "yes"
      fi
   fi
   if [ -z "$READLINE_VERSION" ] ; then
      echo -n "checking for readline 7 (ldconfig -p, Linux)... "
      TMP=`$LDCONFIG_SUDO sudo /sbin/ldconfig -p 2>/dev/null | grep libreadline.so.7`
      if [ -z "$TMP" ] ; then
         echo "no"
      else
         HAS_READLINE=1
         READLINE_VERSION=7
         echo "yes"
      fi
   fi
   if [ -z "$READLINE_VERSION" ] ; then
      echo -n "checking for readline (ldconfig -r, FreeBSD)... "
      TMP=`/sbin/ldconfig -r 2>/dev/null | grep libreadline`
      if [ -z "$TMP" ] ; then
         echo "no"
      else
         HAS_READLINE=1
         READLINE_VERSION=6
         echo "yes"
      fi
   fi
   if [ -z "$READLINE_VERSION" ] ; then
      if [ "$OS" = "cygwin" ] ; then
         echo -n "checking for readline (locate, Cygwin)... "
         TMP=`"$LOCATE" libreadline`
         if [ -z "$TMP" ] ; then
            echo "no"
         else
            HAS_READLINE=1
            READLINE_VERSION=
            echo "yes"
         fi
      else
         echo -n "checking for readline (locate, Darwin)... "
         TMP=`"$LOCATE" libreadline`
         if [ -z "$TMP" ] ; then
            echo "no"
         else
            HAS_READLINE=1
            READLINE_VERSION=6
            echo "yes"
         fi
      fi
   fi
   if [ -z "$HAS_READLINE" ] ; then
      echo
      echo "SparForte cannot find GNU readline and history libraries"
      echo "Please install them or run configure with --without-readline"
      exit 1
   fi
fi

# GNU Make
#
# GMAKETYPE is the name of the make command.  If the user supplied a command,
# use that command instead of trying alternatives.

echo -n "checking for gmake (\$GMAKE)... "
if [ ! -z "$GMAKE" ] ; then
   echo "yes"
   GMAKETYPE="$GMAKE"
else
   echo "no"
   echo -n "checking for gmake... "
   GMAKETYPE=gmake
   $GMAKETYPE --version > /dev/null 2>/dev/null
   if [ $? -eq 0 ] ; then
      echo "yes"
   else
      echo "no"
      echo -n 'checking for ${GMAKE}... '
      if [ ! -z "$GMAKE" ] ; then
         GMAKETYPE="$GMAKE"
         $GMAKETYPE --version > /dev/null 2>/dev/null
         if [ $? -eq 0 ] ; then
            echo "yes"
         else
            echo "no"
            echo
            echo "SparForte requires GNU make.  GNU make normally has a gmake alias"
            echo "but some systems (like Debian/Unbuntu, Cygwin) do not include the"
            echo "alias.  If your system calls gmake by another name (such as"
            echo "'make') use the --make option."
            echo
            echo "For example, 'configure --make=make'"
            exit 1
         fi
      else
         echo "no"
         echo -n "checking for make == gmake (Darwin)... "
         GMAKETYPE="make"
         $GMAKETYPE --version > /dev/null 2> /dev/null
         if [ $? -eq 0 ] ; then
             echo "yes"
         else
             echo "no"
             echo
             echo "SparForte requires GNU make.  GNU make normally has a gmake alias"
             echo "but some systems (like Debian/Linux, Cygwin) do not include the"
             echo "alias.  If your system calls gmake by another name (such as"
             echo "'make') use the --make option."
             echo
             echo "For example, 'configure --make=make'"
             exit 1
         fi
      fi
   fi
fi

# Sound - GStreamer
#
# GSTREAMERFLAG is the C pre-processor flag to enable GSstreamer support.
# It will be non-blank if GStreamer is detected.

GSTREAMERFLAG=
if [ -z "$NO_SOUND" ] ; then
   echo -n "checking for gstreamer (ldconfig -p, Linux)... "
   TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | grep libgstreamer`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo -n "checking for gstreamer (ldconfig -r, FreeBSD)... "
      TMP=`/sbin/ldconfig -r 2>/dev/null | grep libgstreamer`
      if [ -z "$TMP" ] ; then
         echo "no"
         echo -n "checking for gstreamer (locate, Darwin)... "
         TMP=`"$LOCATE" libgstreamer`
         if [ ! -z "$TMP" ] ; then
             GSTREAMERFLAG=-DGSTREAMER
             echo "yes"
         else
             echo "no"
         fi
       else
          GSTREAMERFLAG=-DGSTREAMER
          echo "yes"
       fi
    else
       GSTREAMERFLAG=-DGSTREAMER
       echo "yes"
    fi
else
  GSTREAMERFLAG=
fi

# Regular Expressions - PCRE library
#
# PCREFLAG is the C pre-processor flag to enable PCRE support.
# It will be non-blank if PCRE is detected.

HAS_PCRE=
if [ -z "$NO_PCRE" ] ; then
   echo -n "checking for libpcre (ldconfig -p, Linux)... "
   TMP=`$LDCONFIG_SUDO /sbin/ldconfig -p 2>/dev/null | grep libpcre`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo -n "checking for libpcre (ldconfig -r, FreeBSD)... "
      TMP=`/sbin/ldconfig -r 2>/dev/null | grep libpcre`
      if [ -z "$TMP" ] ; then
         echo "no"
         echo -n "checking for libpcre (locate, Darwin)... "
         TMP=`"$LOCATE" libpcre`
         if [ ! -z "$TMP" ] ; then
             HAS_PCRE=1
             echo "yes"
         else
             echo "no"
         fi
     else
         HAS_PCRE=1
         echo "yes"
     fi
  else
     HAS_PCRE=1
     echo "yes"
  fi
fi

echo "SparForte is configured"

# Configure APQ library
#
# Require a database unless the user explicitly requested no database.

echo
sleep 3
echo "Configuring third-party APQ (Database Library)..."
sleep 1

echo -n "apq library: checking for one or more database config scripts... "
if [ -n "$NO_MYSQL" -a -n "$NO_POSTGRES" ] ; then
   echo "no"
else
   if [ -z "$HAS_POSTGRES" ] ; then
      if [ -z "$HAS_MYSQL" ] ; then
         echo "no"
         echo
         echo "The APQ library uses the pg_config and mysql_config scripts to configure"
         echo "itself.  Not all operating systems include these, or they include them"
         echo "as part of the 'devel' packages.  If you don't have these scripts, you"
         echo "copy them from the database sources into /usr/local/bin"
         exit 1
      else
         echo "yes"
      fi
   else
      echo "yes"
   fi
fi

# APQ will not build with no database selected.  If no database is selected,
# skip this step.  Otherwise, select one database or both through the APQ
# configure script.  If APQ is not built, we not try to load it in SparForte
# (this is done later in the make file).
#
# NO_MYSQL means the user requests no MSYQL support, not that MySQL is not
# installed (that is HAS_MYSQL).

if [ -n "$NO_MYSQL" -a -n "$NO_POSTGRES" ] ; then
    echo "No MySQL or PostgreSQL support."
else
   cd apq-2.1
   if [ -n "$NO_MYSQL" -a -z "$NO_POSTGRES" ] ; then
      echo "Running APQ's configure (no MySQL)..."
      HAVE_MY=0 ./configure
   elif [ -z "$NO_MYSQL" -a -n "$NO_POSTGRES" ] ; then
      echo "Running APQ's configure (no PostgreSQL)..."
      HAVE_PG=0 ./configure
   else
      echo "Running APQ's configure..."
      ./configure
   fi
   cd -
fi
#if test -f Makeincl ; then
#   mv -f Makeincl apq-2.1/Makeincl
#fi
echo "APQ library is configured"

# Create GNUmakefile from GNUmakefile.orig

echo
echo "Returning to SparForte..."

# Update the source files, disabling optional libraries, using the gnatprep
# preprocessor.  Any source file called ".orig" must be processed with
# gnatprep

echo "Updating SparForte source files for this configuration..."

NEEDS_APQ=
if [ -n "$HAS_POSTGRES" ] ; then
   GNATPREP_OPTS="-DPOSTGRES=true"
   NEEDS_APQ=1
else
   GNATPREP_OPTS="-DPOSTGRES=false"
fi
if [ -n "$HAS_OPENGL" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DOPENGL=true"
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DOPENGL=false"
fi
if [ -n "$HAS_MYSQL" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DMYSQL=true"
   NEEDS_APQ=1
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DMYSQL=false"
fi
if [ -n "$HAS_READLINE" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DREADLINE=true"
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DREADLINE=false"
fi
if [ -z "$NO_SOUND" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DSOUND=true"
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DSOUND=false"
fi
if [ -z "$NO_GCGI" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DGCGI=true"
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DGCGI=false"
fi
if [ -z "$NO_BDB" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DBDB=true"
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DBDB=false"
fi
if [ -n "$HAS_PCRE" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DPCRE=true"
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DPCRE=false"
fi
# this is for world.ads. APQ=true if either DB is installed
if [ -n "$NEEDS_APQ" ] ; then
   GNATPREP_OPTS="$GNATPREP_OPTS -DAPQ=true"
else
   GNATPREP_OPTS="$GNATPREP_OPTS -DAPQ=false"
fi
GNATPREP_OPTS="$GNATPREP_OPTS -D configbuildDate=\"$CONFIGBUILDDATE\""
GNATPREP_OPTS="$GNATPREP_OPTS -D configreleased=$CONFIGRELEASED"

# Run each ".orig" file through GnatPrep Ada pre-processor to create the
# final file, with any disabled features removed.

echo "Updating...world.ads"
test -f world.ads && chmod 666 world.ads
cp world.ads.orig temp.ads
gnatprep $GNATPREP_OPTS temp.ads world.ads
chmod 444 world.ads

echo "Updating...user_io.getline.adb"
test -f user_io-getline.adb && chmod 666 user_io-getline.adb
cp user_io-getline.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb user_io-getline.adb
chmod 444 user_io-getline.adb

echo "Updating...scanner_res.ads"
test -f scanner_res.ads && chmod 666 scanner_res.ads
cp scanner_res.ads.orig temp.ads
gnatprep $GNATPREP_OPTS temp.ads scanner_res.ads
chmod 444 scanner_res.ads

echo "Updating...scanner_res.adb"
test -f scanner_res.adb && chmod 666 scanner_res.adb
cp scanner_res.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb scanner_res.adb
chmod 444 scanner_res.adb

#echo "Updating...parser.adb"
#test -f parser.adb && chmod 666 parser.adb
#cp parser.adb.orig temp.adb
#gnatprep $GNATPREP_OPTS temp.adb parser.adb
#chmod 444 parser.adb

echo "Updating...builtins.adb"
test -f builtins.adb && chmod 666 builtins.adb
cp builtins.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb builtins.adb
chmod 444 builtins.adb

echo "Updating...parser_db.adb"
test -f parser_db.adb && chmod 666 parser_db.adb
cp parser_db.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_db.adb
chmod 444 parser_db.adb

echo "Updating...parser_dbm.adb"
test -f parser_dbm.adb && chmod 666 parser_dbm.adb
cp parser_dbm.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_dbm.adb
chmod 444 parser_dbm.adb

echo "Updating...parser_mysql.adb"
test -f parser_mysql.adb && chmod 666 parser_mysql.adb
cp parser_mysql.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_mysql.adb
chmod 444 parser_mysql.adb

echo "Updating...parser_mysqlm.adb"
test -f parser_mysqlm.adb && chmod 666 parser_mysqlm.adb
cp parser_mysqlm.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_mysqlm.adb
chmod 444 parser_mysqlm.adb

echo "Updating...parser_sound.adb"
test -f parser_sound.adb && chmod 666 parser_sound.adb
cp parser_sound.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_sound.adb
chmod 444 parser_sound.adb

echo "Updating...parser_pen.adb"
test -f parser_pen.adb && chmod 666 parser_pen.adb
cp parser_pen.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_pen.adb
chmod 444 parser_pen.adb

echo "Updating...parser_gnat_cgi.adb"
test -f parser_gnat_cgi.adb && chmod 666 parser_gnat_cgi.adb
cp parser_gnat_cgi.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_gnat_cgi.adb
chmod 444 parser_gnat_cgi.adb

echo "Updating...parser_bdb.adb"
test -f parser_bdb.adb && chmod 666 parser_bdb.adb
cp parser_bdb.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_bdb.adb
chmod 444 parser_bdb.adb

echo "Updating...parser_btree_io.adb"
test -f parser_btree_io.adb && chmod 666 parser_btree_io.adb
cp parser_btree_io.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_btree_io.adb
chmod 444 parser_btree_io.adb

echo "Updating...parser_hash_io.adb"
test -f parser_hash_io.adb && chmod 666 parser_hash_io.adb
cp parser_hash_io.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_hash_io.adb
chmod 444 parser_hash_io.adb

echo "Updating...parser_strings_pcre.adb"
test -f parser_strings_pcre.adb && chmod 666 parser_strings_pcre.adb
cp parser_strings_pcre.adb.orig temp.adb
gnatprep $GNATPREP_OPTS temp.adb parser_strings_pcre.adb
chmod 444 parser_strings_pcre.adb

test -f temp.ads && rm temp.ads
test -f temp.adb && rm temp.adb

# Create a new makefile by substituting optional libraries and configuration
# options into the file with sed.

if [ \( -z "$HAS_MYSQL" \) -a \( -z "$HAS_POSTGRES" \) ] ; then
   echo "Disable APQ"
   APQMAKESUB="@echo \"Disabled\""
else
   APQMAKESUB='$(MAKE) -C apq-2.1\/'
fi
if [ -z "$HAS_POSTGRES" ] ; then
   PGLIBSSUB=""
else
   PGLIBSSUB="`pg_config --libdir` `pg_config --libs`"
   # There is a known bug with pg_config in that it reports the compiling
   # libraries for the PostgreSQL server, not libpg.  So it reports more
   # libraries than we need.  Strip out any libraries we don't need.
   PGLIBSSUB=`echo "$PGLIBSSUB" | sed 's/\ \-lxslt//g;s/\ \-lxml2//g;s/\ \-lkrb5//g;s/\ \-lgssapi_krb5//g;s/\ \-lcom_err//g;s/\ \-lcrypto//g;s/\ \-lcrypt//g'`
   # On Raspberry Pi, I confirmed pam and edit weren't necessary to link
   PGLIBSSUB=`echo "$PGLIBSSUB" | sed 's/\ \-lpam//g;s/\ \-ledit//g;s/\ \-lpgport//g;s/\ \-lreadline//g'`
   # On Raspberry Pi 4, libpgcommon isn't in the path
   PGLIBSSUB="/usr/lib/postgresql/11/lib -L""$PGLIBSSUB"
   PGLIBSSUB=`echo "-L""$PGLIBSSUB" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
fi
if [ -z "$HAS_MYSQL" ] ; then
   MYSQLLIBSSUB=""
else
   MYSQLLIBSSUB="`mysql_config --libs`"
   MYSQLLIBSSUB=`echo "$MYSQLLIBSSUB" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
fi
APQLIBSSUB='-L.\/apq-2.1\/ '
if [ -n "$HAS_MYSQL" ] ; then
   APQLIBSSUB="$APQLIBSSUB"' .\/apq-2.1\/c_mysql.o'
fi
APQINCLSSUB='-I.\/apq-2.1\/ '
if [ -z "$HAS_POSTGRES" ] ; then
   if [ -z "$HAS_MYSQL" ] ; then
      APQLIBSSUB=""
      APQINCLSSUB=""
   fi
fi
if [ -z "$NO_SOUND" ] ; then
   if [ -n "$PKGCONFIG" ] ; then
      GSTREAMERLIBS=`pkg-config --cflags --libs gstreamer-0.10 2>/dev/null`
      if [ $? -ne 0 ] ; then
         GSTREAMERLIBS=`pkg-config --cflags --libs gstreamer-1.0 2>/dev/null`
      fi
      GSTREAMERLIBS=`echo "$GSTREAMERLIBS" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
   else
      # FreeBSD 10
      TMP="/usr/local/include/gstreamer-0.10/"
      if [ -d "$TMP" ] ; then
         echo "warning: guessing a gstreamer config"
         GSTREAMERLIBS="-I/usr/local/include/gstreamer-0.10/ -I/usr/local/include/glib-2.0/ -lgstreamer-0.10"
         GSTREAMERLIBS=`echo "$GSTREAMERLIBS" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
      else
         echo "unable to configure gstreamer"
         exit 192
      fi
   fi
   GSTREAMEROBJ="c_gstreamer.o"
fi

if [ -z "$NO_BDB" ] ; then
   BDBINCL='\-I\.\/bdb\/'
   #BDBLIBS="\-L\.\/bdb\/\ \-ldb\ bdb\/bdb_constants.o\ bdb\/bdb.o\ bdb\/c_bdb.o"
   BDBLIBS="\-ldb\ bdb\/c_bdb.o"
else
   BDBLIBS=
fi
if [ -z "$NO_READLINE" ] ; then
   RLINCL="\-I\.\/areadline\/"
   # Linux Mint doesn't need ncurses and breaks...needed for Slackware?
   #RLLIBS="\-L\/lib\/x86_64\-linux\-gnu\/\ \-l:libreadline.so.6\ \-l:libhistory.so.6\ \-lncurses"
   if [ -z "$READLINE_VERSION" ] ; then
      RLLIBS="\-L\/lib\/x86_64\-linux\-gnu\/\ \-lreadline\ \-lhistory"
   else
      RLLIBS="\-L\/lib\/x86_64\-linux\-gnu\/\ \-l:libreadline.so.$READLINE_VERSION\ \-l:libhistory.so.$READLINE_VERSION"
   fi
else
   RLINCL=
   RLLIBS=
fi
if [ -n "$HAS_PCRE" ] ; then
   PCRELIBS=-"lpcre"
   PCREOBJ="c_pcre.o"
else
   PCRELIBS=
fi

PREFIX=`echo "$PREFIX" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
MANPREFIX=`echo "$MANPREFIX" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`

# configure can set constants which affect gstreamer.  Mark it for rebuild
# after a configure.

touch c_gstreamer.c

# Create the makefiles
#
# A very long sed to substitute all the values into the top of the make file.

echo "Creating...src/GNUmakefile"

sed "s/CPUFLAG/$CPU_FLAG/g;s/CCTYPE/$CC/g;s/CPUTYPE/$ARCH/g;s/MANPREFIXSUB/$MANPREFIX/g;s/PREFIXSUB/$PREFIX/g;s/GMAKETYPE/$GMAKETYPE/g;s/SDLLIBSTYPE/$SDLLIBSTYPE/g;s/SDLINCLTYPE/$SDLINCLTYPE/g;s/CFLAGSTYPE/$CFLAGSTYPE/g;s/PGLIBSSUB/$PGLIBSSUB/g;s/MYSQLLIBSSUB/$MYSQLLIBSSUB/g;s/APQLIBSSUB/$APQLIBSSUB/g;s/APQINCLSSUB/$APQINCLSSUB/g;s/SDLINCLSSUB/$SDLINCLSSUB/g;s/APQMAKESUB/$APQMAKESUB/g;s/FASTCGISUB/$FASTCGISUB/g;s/GSTREAMERLIBSSUB/$GSTREAMERLIBS/g;s/GSTREAMERFLAGSUB/$GSTREAMERFLAG/g;s/GSTREAMEROBJSUB/$GSTREAMEROBJ/g;s/MESAINCLSUB/$MESAINCLTYPE/g;s/MESALIBSSUB/$MESALIBSTYPE/g;s/BDBSUB/$BDBLIBS/g;s/BDBINCLSUB/$BDBINCL/g;s/RLINCLSUB/$RLINCL/g;s/RLLIBSSUB/$RLLIBS/g;s/PCRELIBSSUB/$PCRELIBS/g;s/PCREOBJSUB/$PCREOBJ/g;s/PCREFLAGSUB/$PCREFLAG/g" < GNUmakefile.orig > GNUmakefile

cd areadline

echo "Creating...src/areadline/GNUmakefile"
sed "s/RLINCLSUB/$RLINCL/g;s/RLLIBSSUB/$RLLIBS/g" < GNUmakefile.orig > GNUmakefile

cd ../..
echo "Creating...GNUmakefile"
sed "s/CPUFLAG/$CPU_FLAG/g;s/CCTYPE/$CC/g;s/CPUTYPE/$ARCH/g;s/GMAKETYPE/$GMAKETYPE/g;s/CFLAGSTYPE/$CFLAGSTYPE/g;s/MANPREFIXSUB/$MANPREFIX/g;s/PREFIXSUB/$PREFIX/g" < GNUmakefile.orig > GNUmakefile

# Done

echo "-------------------------------------------------------------------"
echo "Please read the INSTALL file if you have problems making SparForte."
echo
if [ "$GMAKE" != "" ] ; then
   echo "Type $GMAKE all (or make help for more options)"
else
   echo "Type $GMAKETYPE all (or make help for more options)"
fi
exit 0

